// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/innovation-mining/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/innovation-mining/pkg/db/ent/techniqueanalysis"
	"github.com/google/uuid"
)

// TechniqueAnalysisUpdate is the builder for updating TechniqueAnalysis entities.
type TechniqueAnalysisUpdate struct {
	config
	hooks    []Hook
	mutation *TechniqueAnalysisMutation
}

// Where appends a list predicates to the TechniqueAnalysisUpdate builder.
func (tau *TechniqueAnalysisUpdate) Where(ps ...predicate.TechniqueAnalysis) *TechniqueAnalysisUpdate {
	tau.mutation.Where(ps...)
	return tau
}

// SetAuthorID sets the "author_id" field.
func (tau *TechniqueAnalysisUpdate) SetAuthorID(u uuid.UUID) *TechniqueAnalysisUpdate {
	tau.mutation.SetAuthorID(u)
	return tau
}

// SetTitle sets the "title" field.
func (tau *TechniqueAnalysisUpdate) SetTitle(s string) *TechniqueAnalysisUpdate {
	tau.mutation.SetTitle(s)
	return tau
}

// SetContent sets the "content" field.
func (tau *TechniqueAnalysisUpdate) SetContent(s string) *TechniqueAnalysisUpdate {
	tau.mutation.SetContent(s)
	return tau
}

// SetProjectID sets the "project_id" field.
func (tau *TechniqueAnalysisUpdate) SetProjectID(u uuid.UUID) *TechniqueAnalysisUpdate {
	tau.mutation.SetProjectID(u)
	return tau
}

// SetCreateAt sets the "create_at" field.
func (tau *TechniqueAnalysisUpdate) SetCreateAt(u uint32) *TechniqueAnalysisUpdate {
	tau.mutation.ResetCreateAt()
	tau.mutation.SetCreateAt(u)
	return tau
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (tau *TechniqueAnalysisUpdate) SetNillableCreateAt(u *uint32) *TechniqueAnalysisUpdate {
	if u != nil {
		tau.SetCreateAt(*u)
	}
	return tau
}

// AddCreateAt adds u to the "create_at" field.
func (tau *TechniqueAnalysisUpdate) AddCreateAt(u uint32) *TechniqueAnalysisUpdate {
	tau.mutation.AddCreateAt(u)
	return tau
}

// SetUpdateAt sets the "update_at" field.
func (tau *TechniqueAnalysisUpdate) SetUpdateAt(u uint32) *TechniqueAnalysisUpdate {
	tau.mutation.ResetUpdateAt()
	tau.mutation.SetUpdateAt(u)
	return tau
}

// AddUpdateAt adds u to the "update_at" field.
func (tau *TechniqueAnalysisUpdate) AddUpdateAt(u uint32) *TechniqueAnalysisUpdate {
	tau.mutation.AddUpdateAt(u)
	return tau
}

// SetDeleteAt sets the "delete_at" field.
func (tau *TechniqueAnalysisUpdate) SetDeleteAt(u uint32) *TechniqueAnalysisUpdate {
	tau.mutation.ResetDeleteAt()
	tau.mutation.SetDeleteAt(u)
	return tau
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (tau *TechniqueAnalysisUpdate) SetNillableDeleteAt(u *uint32) *TechniqueAnalysisUpdate {
	if u != nil {
		tau.SetDeleteAt(*u)
	}
	return tau
}

// AddDeleteAt adds u to the "delete_at" field.
func (tau *TechniqueAnalysisUpdate) AddDeleteAt(u uint32) *TechniqueAnalysisUpdate {
	tau.mutation.AddDeleteAt(u)
	return tau
}

// Mutation returns the TechniqueAnalysisMutation object of the builder.
func (tau *TechniqueAnalysisUpdate) Mutation() *TechniqueAnalysisMutation {
	return tau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tau *TechniqueAnalysisUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tau.defaults()
	if len(tau.hooks) == 0 {
		affected, err = tau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TechniqueAnalysisMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tau.mutation = mutation
			affected, err = tau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tau.hooks) - 1; i >= 0; i-- {
			if tau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tau *TechniqueAnalysisUpdate) SaveX(ctx context.Context) int {
	affected, err := tau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tau *TechniqueAnalysisUpdate) Exec(ctx context.Context) error {
	_, err := tau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tau *TechniqueAnalysisUpdate) ExecX(ctx context.Context) {
	if err := tau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tau *TechniqueAnalysisUpdate) defaults() {
	if _, ok := tau.mutation.UpdateAt(); !ok {
		v := techniqueanalysis.UpdateDefaultUpdateAt()
		tau.mutation.SetUpdateAt(v)
	}
}

func (tau *TechniqueAnalysisUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   techniqueanalysis.Table,
			Columns: techniqueanalysis.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: techniqueanalysis.FieldID,
			},
		},
	}
	if ps := tau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tau.mutation.AuthorID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: techniqueanalysis.FieldAuthorID,
		})
	}
	if value, ok := tau.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: techniqueanalysis.FieldTitle,
		})
	}
	if value, ok := tau.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: techniqueanalysis.FieldContent,
		})
	}
	if value, ok := tau.mutation.ProjectID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: techniqueanalysis.FieldProjectID,
		})
	}
	if value, ok := tau.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: techniqueanalysis.FieldCreateAt,
		})
	}
	if value, ok := tau.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: techniqueanalysis.FieldCreateAt,
		})
	}
	if value, ok := tau.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: techniqueanalysis.FieldUpdateAt,
		})
	}
	if value, ok := tau.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: techniqueanalysis.FieldUpdateAt,
		})
	}
	if value, ok := tau.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: techniqueanalysis.FieldDeleteAt,
		})
	}
	if value, ok := tau.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: techniqueanalysis.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{techniqueanalysis.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TechniqueAnalysisUpdateOne is the builder for updating a single TechniqueAnalysis entity.
type TechniqueAnalysisUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TechniqueAnalysisMutation
}

// SetAuthorID sets the "author_id" field.
func (tauo *TechniqueAnalysisUpdateOne) SetAuthorID(u uuid.UUID) *TechniqueAnalysisUpdateOne {
	tauo.mutation.SetAuthorID(u)
	return tauo
}

// SetTitle sets the "title" field.
func (tauo *TechniqueAnalysisUpdateOne) SetTitle(s string) *TechniqueAnalysisUpdateOne {
	tauo.mutation.SetTitle(s)
	return tauo
}

// SetContent sets the "content" field.
func (tauo *TechniqueAnalysisUpdateOne) SetContent(s string) *TechniqueAnalysisUpdateOne {
	tauo.mutation.SetContent(s)
	return tauo
}

// SetProjectID sets the "project_id" field.
func (tauo *TechniqueAnalysisUpdateOne) SetProjectID(u uuid.UUID) *TechniqueAnalysisUpdateOne {
	tauo.mutation.SetProjectID(u)
	return tauo
}

// SetCreateAt sets the "create_at" field.
func (tauo *TechniqueAnalysisUpdateOne) SetCreateAt(u uint32) *TechniqueAnalysisUpdateOne {
	tauo.mutation.ResetCreateAt()
	tauo.mutation.SetCreateAt(u)
	return tauo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (tauo *TechniqueAnalysisUpdateOne) SetNillableCreateAt(u *uint32) *TechniqueAnalysisUpdateOne {
	if u != nil {
		tauo.SetCreateAt(*u)
	}
	return tauo
}

// AddCreateAt adds u to the "create_at" field.
func (tauo *TechniqueAnalysisUpdateOne) AddCreateAt(u uint32) *TechniqueAnalysisUpdateOne {
	tauo.mutation.AddCreateAt(u)
	return tauo
}

// SetUpdateAt sets the "update_at" field.
func (tauo *TechniqueAnalysisUpdateOne) SetUpdateAt(u uint32) *TechniqueAnalysisUpdateOne {
	tauo.mutation.ResetUpdateAt()
	tauo.mutation.SetUpdateAt(u)
	return tauo
}

// AddUpdateAt adds u to the "update_at" field.
func (tauo *TechniqueAnalysisUpdateOne) AddUpdateAt(u uint32) *TechniqueAnalysisUpdateOne {
	tauo.mutation.AddUpdateAt(u)
	return tauo
}

// SetDeleteAt sets the "delete_at" field.
func (tauo *TechniqueAnalysisUpdateOne) SetDeleteAt(u uint32) *TechniqueAnalysisUpdateOne {
	tauo.mutation.ResetDeleteAt()
	tauo.mutation.SetDeleteAt(u)
	return tauo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (tauo *TechniqueAnalysisUpdateOne) SetNillableDeleteAt(u *uint32) *TechniqueAnalysisUpdateOne {
	if u != nil {
		tauo.SetDeleteAt(*u)
	}
	return tauo
}

// AddDeleteAt adds u to the "delete_at" field.
func (tauo *TechniqueAnalysisUpdateOne) AddDeleteAt(u uint32) *TechniqueAnalysisUpdateOne {
	tauo.mutation.AddDeleteAt(u)
	return tauo
}

// Mutation returns the TechniqueAnalysisMutation object of the builder.
func (tauo *TechniqueAnalysisUpdateOne) Mutation() *TechniqueAnalysisMutation {
	return tauo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tauo *TechniqueAnalysisUpdateOne) Select(field string, fields ...string) *TechniqueAnalysisUpdateOne {
	tauo.fields = append([]string{field}, fields...)
	return tauo
}

// Save executes the query and returns the updated TechniqueAnalysis entity.
func (tauo *TechniqueAnalysisUpdateOne) Save(ctx context.Context) (*TechniqueAnalysis, error) {
	var (
		err  error
		node *TechniqueAnalysis
	)
	tauo.defaults()
	if len(tauo.hooks) == 0 {
		node, err = tauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TechniqueAnalysisMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tauo.mutation = mutation
			node, err = tauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tauo.hooks) - 1; i >= 0; i-- {
			if tauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tauo *TechniqueAnalysisUpdateOne) SaveX(ctx context.Context) *TechniqueAnalysis {
	node, err := tauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tauo *TechniqueAnalysisUpdateOne) Exec(ctx context.Context) error {
	_, err := tauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tauo *TechniqueAnalysisUpdateOne) ExecX(ctx context.Context) {
	if err := tauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tauo *TechniqueAnalysisUpdateOne) defaults() {
	if _, ok := tauo.mutation.UpdateAt(); !ok {
		v := techniqueanalysis.UpdateDefaultUpdateAt()
		tauo.mutation.SetUpdateAt(v)
	}
}

func (tauo *TechniqueAnalysisUpdateOne) sqlSave(ctx context.Context) (_node *TechniqueAnalysis, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   techniqueanalysis.Table,
			Columns: techniqueanalysis.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: techniqueanalysis.FieldID,
			},
		},
	}
	id, ok := tauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TechniqueAnalysis.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, techniqueanalysis.FieldID)
		for _, f := range fields {
			if !techniqueanalysis.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != techniqueanalysis.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tauo.mutation.AuthorID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: techniqueanalysis.FieldAuthorID,
		})
	}
	if value, ok := tauo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: techniqueanalysis.FieldTitle,
		})
	}
	if value, ok := tauo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: techniqueanalysis.FieldContent,
		})
	}
	if value, ok := tauo.mutation.ProjectID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: techniqueanalysis.FieldProjectID,
		})
	}
	if value, ok := tauo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: techniqueanalysis.FieldCreateAt,
		})
	}
	if value, ok := tauo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: techniqueanalysis.FieldCreateAt,
		})
	}
	if value, ok := tauo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: techniqueanalysis.FieldUpdateAt,
		})
	}
	if value, ok := tauo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: techniqueanalysis.FieldUpdateAt,
		})
	}
	if value, ok := tauo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: techniqueanalysis.FieldDeleteAt,
		})
	}
	if value, ok := tauo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: techniqueanalysis.FieldDeleteAt,
		})
	}
	_node = &TechniqueAnalysis{config: tauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{techniqueanalysis.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
