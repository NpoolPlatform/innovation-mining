// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/innovation-mining/pkg/db/ent/member"
	"github.com/google/uuid"
)

// MemberCreate is the builder for creating a Member entity.
type MemberCreate struct {
	config
	mutation *MemberMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetFirstName sets the "first_name" field.
func (mc *MemberCreate) SetFirstName(s string) *MemberCreate {
	mc.mutation.SetFirstName(s)
	return mc
}

// SetLastName sets the "last_name" field.
func (mc *MemberCreate) SetLastName(s string) *MemberCreate {
	mc.mutation.SetLastName(s)
	return mc
}

// SetIntroduction sets the "introduction" field.
func (mc *MemberCreate) SetIntroduction(s string) *MemberCreate {
	mc.mutation.SetIntroduction(s)
	return mc
}

// SetCreateAt sets the "create_at" field.
func (mc *MemberCreate) SetCreateAt(u uint32) *MemberCreate {
	mc.mutation.SetCreateAt(u)
	return mc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (mc *MemberCreate) SetNillableCreateAt(u *uint32) *MemberCreate {
	if u != nil {
		mc.SetCreateAt(*u)
	}
	return mc
}

// SetUpdateAt sets the "update_at" field.
func (mc *MemberCreate) SetUpdateAt(u uint32) *MemberCreate {
	mc.mutation.SetUpdateAt(u)
	return mc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (mc *MemberCreate) SetNillableUpdateAt(u *uint32) *MemberCreate {
	if u != nil {
		mc.SetUpdateAt(*u)
	}
	return mc
}

// SetDeleteAt sets the "delete_at" field.
func (mc *MemberCreate) SetDeleteAt(u uint32) *MemberCreate {
	mc.mutation.SetDeleteAt(u)
	return mc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (mc *MemberCreate) SetNillableDeleteAt(u *uint32) *MemberCreate {
	if u != nil {
		mc.SetDeleteAt(*u)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *MemberCreate) SetID(u uuid.UUID) *MemberCreate {
	mc.mutation.SetID(u)
	return mc
}

// Mutation returns the MemberMutation object of the builder.
func (mc *MemberCreate) Mutation() *MemberMutation {
	return mc.mutation
}

// Save creates the Member in the database.
func (mc *MemberCreate) Save(ctx context.Context) (*Member, error) {
	var (
		err  error
		node *Member
	)
	mc.defaults()
	if len(mc.hooks) == 0 {
		if err = mc.check(); err != nil {
			return nil, err
		}
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MemberMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mc.check(); err != nil {
				return nil, err
			}
			mc.mutation = mutation
			if node, err = mc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			if mc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MemberCreate) SaveX(ctx context.Context) *Member {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MemberCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MemberCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MemberCreate) defaults() {
	if _, ok := mc.mutation.CreateAt(); !ok {
		v := member.DefaultCreateAt()
		mc.mutation.SetCreateAt(v)
	}
	if _, ok := mc.mutation.UpdateAt(); !ok {
		v := member.DefaultUpdateAt()
		mc.mutation.SetUpdateAt(v)
	}
	if _, ok := mc.mutation.DeleteAt(); !ok {
		v := member.DefaultDeleteAt()
		mc.mutation.SetDeleteAt(v)
	}
	if _, ok := mc.mutation.ID(); !ok {
		v := member.DefaultID()
		mc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MemberCreate) check() error {
	if _, ok := mc.mutation.FirstName(); !ok {
		return &ValidationError{Name: "first_name", err: errors.New(`ent: missing required field "first_name"`)}
	}
	if _, ok := mc.mutation.LastName(); !ok {
		return &ValidationError{Name: "last_name", err: errors.New(`ent: missing required field "last_name"`)}
	}
	if _, ok := mc.mutation.Introduction(); !ok {
		return &ValidationError{Name: "introduction", err: errors.New(`ent: missing required field "introduction"`)}
	}
	if _, ok := mc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "create_at"`)}
	}
	if _, ok := mc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "update_at"`)}
	}
	if _, ok := mc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "delete_at"`)}
	}
	return nil
}

func (mc *MemberCreate) sqlSave(ctx context.Context) (*Member, error) {
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (mc *MemberCreate) createSpec() (*Member, *sqlgraph.CreateSpec) {
	var (
		_node = &Member{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: member.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: member.FieldID,
			},
		}
	)
	_spec.OnConflict = mc.conflict
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.FirstName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: member.FieldFirstName,
		})
		_node.FirstName = value
	}
	if value, ok := mc.mutation.LastName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: member.FieldLastName,
		})
		_node.LastName = value
	}
	if value, ok := mc.mutation.Introduction(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: member.FieldIntroduction,
		})
		_node.Introduction = value
	}
	if value, ok := mc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: member.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := mc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: member.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := mc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: member.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Member.Create().
//		SetFirstName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MemberUpsert) {
//			SetFirstName(v+v).
//		}).
//		Exec(ctx)
//
func (mc *MemberCreate) OnConflict(opts ...sql.ConflictOption) *MemberUpsertOne {
	mc.conflict = opts
	return &MemberUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Member.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (mc *MemberCreate) OnConflictColumns(columns ...string) *MemberUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &MemberUpsertOne{
		create: mc,
	}
}

type (
	// MemberUpsertOne is the builder for "upsert"-ing
	//  one Member node.
	MemberUpsertOne struct {
		create *MemberCreate
	}

	// MemberUpsert is the "OnConflict" setter.
	MemberUpsert struct {
		*sql.UpdateSet
	}
)

// SetFirstName sets the "first_name" field.
func (u *MemberUpsert) SetFirstName(v string) *MemberUpsert {
	u.Set(member.FieldFirstName, v)
	return u
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *MemberUpsert) UpdateFirstName() *MemberUpsert {
	u.SetExcluded(member.FieldFirstName)
	return u
}

// SetLastName sets the "last_name" field.
func (u *MemberUpsert) SetLastName(v string) *MemberUpsert {
	u.Set(member.FieldLastName, v)
	return u
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *MemberUpsert) UpdateLastName() *MemberUpsert {
	u.SetExcluded(member.FieldLastName)
	return u
}

// SetIntroduction sets the "introduction" field.
func (u *MemberUpsert) SetIntroduction(v string) *MemberUpsert {
	u.Set(member.FieldIntroduction, v)
	return u
}

// UpdateIntroduction sets the "introduction" field to the value that was provided on create.
func (u *MemberUpsert) UpdateIntroduction() *MemberUpsert {
	u.SetExcluded(member.FieldIntroduction)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *MemberUpsert) SetCreateAt(v uint32) *MemberUpsert {
	u.Set(member.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *MemberUpsert) UpdateCreateAt() *MemberUpsert {
	u.SetExcluded(member.FieldCreateAt)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *MemberUpsert) SetUpdateAt(v uint32) *MemberUpsert {
	u.Set(member.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *MemberUpsert) UpdateUpdateAt() *MemberUpsert {
	u.SetExcluded(member.FieldUpdateAt)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *MemberUpsert) SetDeleteAt(v uint32) *MemberUpsert {
	u.Set(member.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *MemberUpsert) UpdateDeleteAt() *MemberUpsert {
	u.SetExcluded(member.FieldDeleteAt)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Member.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(member.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *MemberUpsertOne) UpdateNewValues() *MemberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(member.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Member.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *MemberUpsertOne) Ignore() *MemberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MemberUpsertOne) DoNothing() *MemberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MemberCreate.OnConflict
// documentation for more info.
func (u *MemberUpsertOne) Update(set func(*MemberUpsert)) *MemberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MemberUpsert{UpdateSet: update})
	}))
	return u
}

// SetFirstName sets the "first_name" field.
func (u *MemberUpsertOne) SetFirstName(v string) *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.SetFirstName(v)
	})
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *MemberUpsertOne) UpdateFirstName() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateFirstName()
	})
}

// SetLastName sets the "last_name" field.
func (u *MemberUpsertOne) SetLastName(v string) *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.SetLastName(v)
	})
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *MemberUpsertOne) UpdateLastName() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateLastName()
	})
}

// SetIntroduction sets the "introduction" field.
func (u *MemberUpsertOne) SetIntroduction(v string) *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.SetIntroduction(v)
	})
}

// UpdateIntroduction sets the "introduction" field to the value that was provided on create.
func (u *MemberUpsertOne) UpdateIntroduction() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateIntroduction()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *MemberUpsertOne) SetCreateAt(v uint32) *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.SetCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *MemberUpsertOne) UpdateCreateAt() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *MemberUpsertOne) SetUpdateAt(v uint32) *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.SetUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *MemberUpsertOne) UpdateUpdateAt() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *MemberUpsertOne) SetDeleteAt(v uint32) *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.SetDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *MemberUpsertOne) UpdateDeleteAt() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *MemberUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MemberCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MemberUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MemberUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: MemberUpsertOne.ID is not supported by MySQL driver. Use MemberUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MemberUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MemberCreateBulk is the builder for creating many Member entities in bulk.
type MemberCreateBulk struct {
	config
	builders []*MemberCreate
	conflict []sql.ConflictOption
}

// Save creates the Member entities in the database.
func (mcb *MemberCreateBulk) Save(ctx context.Context) ([]*Member, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Member, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MemberMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MemberCreateBulk) SaveX(ctx context.Context) []*Member {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MemberCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MemberCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Member.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MemberUpsert) {
//			SetFirstName(v+v).
//		}).
//		Exec(ctx)
//
func (mcb *MemberCreateBulk) OnConflict(opts ...sql.ConflictOption) *MemberUpsertBulk {
	mcb.conflict = opts
	return &MemberUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Member.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (mcb *MemberCreateBulk) OnConflictColumns(columns ...string) *MemberUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &MemberUpsertBulk{
		create: mcb,
	}
}

// MemberUpsertBulk is the builder for "upsert"-ing
// a bulk of Member nodes.
type MemberUpsertBulk struct {
	create *MemberCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Member.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(member.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *MemberUpsertBulk) UpdateNewValues() *MemberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(member.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Member.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *MemberUpsertBulk) Ignore() *MemberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MemberUpsertBulk) DoNothing() *MemberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MemberCreateBulk.OnConflict
// documentation for more info.
func (u *MemberUpsertBulk) Update(set func(*MemberUpsert)) *MemberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MemberUpsert{UpdateSet: update})
	}))
	return u
}

// SetFirstName sets the "first_name" field.
func (u *MemberUpsertBulk) SetFirstName(v string) *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.SetFirstName(v)
	})
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *MemberUpsertBulk) UpdateFirstName() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateFirstName()
	})
}

// SetLastName sets the "last_name" field.
func (u *MemberUpsertBulk) SetLastName(v string) *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.SetLastName(v)
	})
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *MemberUpsertBulk) UpdateLastName() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateLastName()
	})
}

// SetIntroduction sets the "introduction" field.
func (u *MemberUpsertBulk) SetIntroduction(v string) *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.SetIntroduction(v)
	})
}

// UpdateIntroduction sets the "introduction" field to the value that was provided on create.
func (u *MemberUpsertBulk) UpdateIntroduction() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateIntroduction()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *MemberUpsertBulk) SetCreateAt(v uint32) *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.SetCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *MemberUpsertBulk) UpdateCreateAt() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *MemberUpsertBulk) SetUpdateAt(v uint32) *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.SetUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *MemberUpsertBulk) UpdateUpdateAt() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *MemberUpsertBulk) SetDeleteAt(v uint32) *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.SetDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *MemberUpsertBulk) UpdateDeleteAt() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *MemberUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MemberCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MemberCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MemberUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
