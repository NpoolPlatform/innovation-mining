// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/innovation-mining/pkg/db/ent/launchtime"
	"github.com/google/uuid"
)

// LaunchTime is the model entity for the LaunchTime schema.
type LaunchTime struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ProjectID holds the value of the "project_id" field.
	ProjectID uuid.UUID `json:"project_id,omitempty"`
	// NetworkName holds the value of the "network_name" field.
	NetworkName string `json:"network_name,omitempty"`
	// NetworkVersion holds the value of the "network_version" field.
	NetworkVersion string `json:"network_version,omitempty"`
	// Introduction holds the value of the "introduction" field.
	Introduction string `json:"introduction,omitempty"`
	// LaunchTime holds the value of the "launch_time" field.
	LaunchTime uint32 `json:"launch_time,omitempty"`
	// Incentive holds the value of the "incentive" field.
	Incentive bool `json:"incentive,omitempty"`
	// IncentiveTotal holds the value of the "incentive_total" field.
	IncentiveTotal uint32 `json:"incentive_total,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LaunchTime) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case launchtime.FieldIncentive:
			values[i] = new(sql.NullBool)
		case launchtime.FieldLaunchTime, launchtime.FieldIncentiveTotal, launchtime.FieldCreateAt, launchtime.FieldUpdateAt, launchtime.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case launchtime.FieldNetworkName, launchtime.FieldNetworkVersion, launchtime.FieldIntroduction:
			values[i] = new(sql.NullString)
		case launchtime.FieldID, launchtime.FieldProjectID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type LaunchTime", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LaunchTime fields.
func (lt *LaunchTime) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case launchtime.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				lt.ID = *value
			}
		case launchtime.FieldProjectID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field project_id", values[i])
			} else if value != nil {
				lt.ProjectID = *value
			}
		case launchtime.FieldNetworkName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field network_name", values[i])
			} else if value.Valid {
				lt.NetworkName = value.String
			}
		case launchtime.FieldNetworkVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field network_version", values[i])
			} else if value.Valid {
				lt.NetworkVersion = value.String
			}
		case launchtime.FieldIntroduction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field introduction", values[i])
			} else if value.Valid {
				lt.Introduction = value.String
			}
		case launchtime.FieldLaunchTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field launch_time", values[i])
			} else if value.Valid {
				lt.LaunchTime = uint32(value.Int64)
			}
		case launchtime.FieldIncentive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field incentive", values[i])
			} else if value.Valid {
				lt.Incentive = value.Bool
			}
		case launchtime.FieldIncentiveTotal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field incentive_total", values[i])
			} else if value.Valid {
				lt.IncentiveTotal = uint32(value.Int64)
			}
		case launchtime.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				lt.CreateAt = uint32(value.Int64)
			}
		case launchtime.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				lt.UpdateAt = uint32(value.Int64)
			}
		case launchtime.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				lt.DeleteAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this LaunchTime.
// Note that you need to call LaunchTime.Unwrap() before calling this method if this LaunchTime
// was returned from a transaction, and the transaction was committed or rolled back.
func (lt *LaunchTime) Update() *LaunchTimeUpdateOne {
	return (&LaunchTimeClient{config: lt.config}).UpdateOne(lt)
}

// Unwrap unwraps the LaunchTime entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lt *LaunchTime) Unwrap() *LaunchTime {
	tx, ok := lt.config.driver.(*txDriver)
	if !ok {
		panic("ent: LaunchTime is not a transactional entity")
	}
	lt.config.driver = tx.drv
	return lt
}

// String implements the fmt.Stringer.
func (lt *LaunchTime) String() string {
	var builder strings.Builder
	builder.WriteString("LaunchTime(")
	builder.WriteString(fmt.Sprintf("id=%v", lt.ID))
	builder.WriteString(", project_id=")
	builder.WriteString(fmt.Sprintf("%v", lt.ProjectID))
	builder.WriteString(", network_name=")
	builder.WriteString(lt.NetworkName)
	builder.WriteString(", network_version=")
	builder.WriteString(lt.NetworkVersion)
	builder.WriteString(", introduction=")
	builder.WriteString(lt.Introduction)
	builder.WriteString(", launch_time=")
	builder.WriteString(fmt.Sprintf("%v", lt.LaunchTime))
	builder.WriteString(", incentive=")
	builder.WriteString(fmt.Sprintf("%v", lt.Incentive))
	builder.WriteString(", incentive_total=")
	builder.WriteString(fmt.Sprintf("%v", lt.IncentiveTotal))
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", lt.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", lt.UpdateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", lt.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// LaunchTimes is a parsable slice of LaunchTime.
type LaunchTimes []*LaunchTime

func (lt LaunchTimes) config(cfg config) {
	for _i := range lt {
		lt[_i].config = cfg
	}
}
