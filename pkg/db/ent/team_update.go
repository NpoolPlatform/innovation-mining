// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/innovation-minning/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/innovation-minning/pkg/db/ent/team"
	"github.com/google/uuid"
)

// TeamUpdate is the builder for updating Team entities.
type TeamUpdate struct {
	config
	hooks    []Hook
	mutation *TeamMutation
}

// Where appends a list predicates to the TeamUpdate builder.
func (tu *TeamUpdate) Where(ps ...predicate.Team) *TeamUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetTeamName sets the "team_name" field.
func (tu *TeamUpdate) SetTeamName(s string) *TeamUpdate {
	tu.mutation.SetTeamName(s)
	return tu
}

// SetLogo sets the "logo" field.
func (tu *TeamUpdate) SetLogo(s string) *TeamUpdate {
	tu.mutation.SetLogo(s)
	return tu
}

// SetLeaderID sets the "leader_id" field.
func (tu *TeamUpdate) SetLeaderID(u uuid.UUID) *TeamUpdate {
	tu.mutation.SetLeaderID(u)
	return tu
}

// SetMemberIds sets the "member_ids" field.
func (tu *TeamUpdate) SetMemberIds(u []uuid.UUID) *TeamUpdate {
	tu.mutation.SetMemberIds(u)
	return tu
}

// SetIntroduction sets the "introduction" field.
func (tu *TeamUpdate) SetIntroduction(s string) *TeamUpdate {
	tu.mutation.SetIntroduction(s)
	return tu
}

// SetCreateAt sets the "create_at" field.
func (tu *TeamUpdate) SetCreateAt(u uint32) *TeamUpdate {
	tu.mutation.ResetCreateAt()
	tu.mutation.SetCreateAt(u)
	return tu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (tu *TeamUpdate) SetNillableCreateAt(u *uint32) *TeamUpdate {
	if u != nil {
		tu.SetCreateAt(*u)
	}
	return tu
}

// AddCreateAt adds u to the "create_at" field.
func (tu *TeamUpdate) AddCreateAt(u uint32) *TeamUpdate {
	tu.mutation.AddCreateAt(u)
	return tu
}

// SetUpdateAt sets the "update_at" field.
func (tu *TeamUpdate) SetUpdateAt(u uint32) *TeamUpdate {
	tu.mutation.ResetUpdateAt()
	tu.mutation.SetUpdateAt(u)
	return tu
}

// AddUpdateAt adds u to the "update_at" field.
func (tu *TeamUpdate) AddUpdateAt(u uint32) *TeamUpdate {
	tu.mutation.AddUpdateAt(u)
	return tu
}

// SetDeleteAt sets the "delete_at" field.
func (tu *TeamUpdate) SetDeleteAt(u uint32) *TeamUpdate {
	tu.mutation.ResetDeleteAt()
	tu.mutation.SetDeleteAt(u)
	return tu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (tu *TeamUpdate) SetNillableDeleteAt(u *uint32) *TeamUpdate {
	if u != nil {
		tu.SetDeleteAt(*u)
	}
	return tu
}

// AddDeleteAt adds u to the "delete_at" field.
func (tu *TeamUpdate) AddDeleteAt(u uint32) *TeamUpdate {
	tu.mutation.AddDeleteAt(u)
	return tu
}

// Mutation returns the TeamMutation object of the builder.
func (tu *TeamUpdate) Mutation() *TeamMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TeamUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tu.defaults()
	if len(tu.hooks) == 0 {
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TeamMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TeamUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TeamUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TeamUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TeamUpdate) defaults() {
	if _, ok := tu.mutation.UpdateAt(); !ok {
		v := team.UpdateDefaultUpdateAt()
		tu.mutation.SetUpdateAt(v)
	}
}

func (tu *TeamUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   team.Table,
			Columns: team.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: team.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.TeamName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: team.FieldTeamName,
		})
	}
	if value, ok := tu.mutation.Logo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: team.FieldLogo,
		})
	}
	if value, ok := tu.mutation.LeaderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: team.FieldLeaderID,
		})
	}
	if value, ok := tu.mutation.MemberIds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: team.FieldMemberIds,
		})
	}
	if value, ok := tu.mutation.Introduction(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: team.FieldIntroduction,
		})
	}
	if value, ok := tu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: team.FieldCreateAt,
		})
	}
	if value, ok := tu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: team.FieldCreateAt,
		})
	}
	if value, ok := tu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: team.FieldUpdateAt,
		})
	}
	if value, ok := tu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: team.FieldUpdateAt,
		})
	}
	if value, ok := tu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: team.FieldDeleteAt,
		})
	}
	if value, ok := tu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: team.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{team.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TeamUpdateOne is the builder for updating a single Team entity.
type TeamUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TeamMutation
}

// SetTeamName sets the "team_name" field.
func (tuo *TeamUpdateOne) SetTeamName(s string) *TeamUpdateOne {
	tuo.mutation.SetTeamName(s)
	return tuo
}

// SetLogo sets the "logo" field.
func (tuo *TeamUpdateOne) SetLogo(s string) *TeamUpdateOne {
	tuo.mutation.SetLogo(s)
	return tuo
}

// SetLeaderID sets the "leader_id" field.
func (tuo *TeamUpdateOne) SetLeaderID(u uuid.UUID) *TeamUpdateOne {
	tuo.mutation.SetLeaderID(u)
	return tuo
}

// SetMemberIds sets the "member_ids" field.
func (tuo *TeamUpdateOne) SetMemberIds(u []uuid.UUID) *TeamUpdateOne {
	tuo.mutation.SetMemberIds(u)
	return tuo
}

// SetIntroduction sets the "introduction" field.
func (tuo *TeamUpdateOne) SetIntroduction(s string) *TeamUpdateOne {
	tuo.mutation.SetIntroduction(s)
	return tuo
}

// SetCreateAt sets the "create_at" field.
func (tuo *TeamUpdateOne) SetCreateAt(u uint32) *TeamUpdateOne {
	tuo.mutation.ResetCreateAt()
	tuo.mutation.SetCreateAt(u)
	return tuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (tuo *TeamUpdateOne) SetNillableCreateAt(u *uint32) *TeamUpdateOne {
	if u != nil {
		tuo.SetCreateAt(*u)
	}
	return tuo
}

// AddCreateAt adds u to the "create_at" field.
func (tuo *TeamUpdateOne) AddCreateAt(u uint32) *TeamUpdateOne {
	tuo.mutation.AddCreateAt(u)
	return tuo
}

// SetUpdateAt sets the "update_at" field.
func (tuo *TeamUpdateOne) SetUpdateAt(u uint32) *TeamUpdateOne {
	tuo.mutation.ResetUpdateAt()
	tuo.mutation.SetUpdateAt(u)
	return tuo
}

// AddUpdateAt adds u to the "update_at" field.
func (tuo *TeamUpdateOne) AddUpdateAt(u uint32) *TeamUpdateOne {
	tuo.mutation.AddUpdateAt(u)
	return tuo
}

// SetDeleteAt sets the "delete_at" field.
func (tuo *TeamUpdateOne) SetDeleteAt(u uint32) *TeamUpdateOne {
	tuo.mutation.ResetDeleteAt()
	tuo.mutation.SetDeleteAt(u)
	return tuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (tuo *TeamUpdateOne) SetNillableDeleteAt(u *uint32) *TeamUpdateOne {
	if u != nil {
		tuo.SetDeleteAt(*u)
	}
	return tuo
}

// AddDeleteAt adds u to the "delete_at" field.
func (tuo *TeamUpdateOne) AddDeleteAt(u uint32) *TeamUpdateOne {
	tuo.mutation.AddDeleteAt(u)
	return tuo
}

// Mutation returns the TeamMutation object of the builder.
func (tuo *TeamUpdateOne) Mutation() *TeamMutation {
	return tuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TeamUpdateOne) Select(field string, fields ...string) *TeamUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Team entity.
func (tuo *TeamUpdateOne) Save(ctx context.Context) (*Team, error) {
	var (
		err  error
		node *Team
	)
	tuo.defaults()
	if len(tuo.hooks) == 0 {
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TeamMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TeamUpdateOne) SaveX(ctx context.Context) *Team {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TeamUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TeamUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TeamUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdateAt(); !ok {
		v := team.UpdateDefaultUpdateAt()
		tuo.mutation.SetUpdateAt(v)
	}
}

func (tuo *TeamUpdateOne) sqlSave(ctx context.Context) (_node *Team, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   team.Table,
			Columns: team.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: team.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Team.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, team.FieldID)
		for _, f := range fields {
			if !team.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != team.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.TeamName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: team.FieldTeamName,
		})
	}
	if value, ok := tuo.mutation.Logo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: team.FieldLogo,
		})
	}
	if value, ok := tuo.mutation.LeaderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: team.FieldLeaderID,
		})
	}
	if value, ok := tuo.mutation.MemberIds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: team.FieldMemberIds,
		})
	}
	if value, ok := tuo.mutation.Introduction(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: team.FieldIntroduction,
		})
	}
	if value, ok := tuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: team.FieldCreateAt,
		})
	}
	if value, ok := tuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: team.FieldCreateAt,
		})
	}
	if value, ok := tuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: team.FieldUpdateAt,
		})
	}
	if value, ok := tuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: team.FieldUpdateAt,
		})
	}
	if value, ok := tuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: team.FieldDeleteAt,
		})
	}
	if value, ok := tuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: team.FieldDeleteAt,
		})
	}
	_node = &Team{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{team.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
