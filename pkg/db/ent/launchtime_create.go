// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/innovation-minning/pkg/db/ent/launchtime"
	"github.com/google/uuid"
)

// LaunchTimeCreate is the builder for creating a LaunchTime entity.
type LaunchTimeCreate struct {
	config
	mutation *LaunchTimeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetProjectID sets the "project_id" field.
func (ltc *LaunchTimeCreate) SetProjectID(u uuid.UUID) *LaunchTimeCreate {
	ltc.mutation.SetProjectID(u)
	return ltc
}

// SetNetworkName sets the "network_name" field.
func (ltc *LaunchTimeCreate) SetNetworkName(s string) *LaunchTimeCreate {
	ltc.mutation.SetNetworkName(s)
	return ltc
}

// SetNetworkVersion sets the "network_version" field.
func (ltc *LaunchTimeCreate) SetNetworkVersion(s string) *LaunchTimeCreate {
	ltc.mutation.SetNetworkVersion(s)
	return ltc
}

// SetIntroduction sets the "introduction" field.
func (ltc *LaunchTimeCreate) SetIntroduction(s string) *LaunchTimeCreate {
	ltc.mutation.SetIntroduction(s)
	return ltc
}

// SetLaunchTime sets the "launch_time" field.
func (ltc *LaunchTimeCreate) SetLaunchTime(u uint32) *LaunchTimeCreate {
	ltc.mutation.SetLaunchTime(u)
	return ltc
}

// SetIncentive sets the "incentive" field.
func (ltc *LaunchTimeCreate) SetIncentive(b bool) *LaunchTimeCreate {
	ltc.mutation.SetIncentive(b)
	return ltc
}

// SetIncentiveTotal sets the "incentive_total" field.
func (ltc *LaunchTimeCreate) SetIncentiveTotal(u uint32) *LaunchTimeCreate {
	ltc.mutation.SetIncentiveTotal(u)
	return ltc
}

// SetCreateAt sets the "create_at" field.
func (ltc *LaunchTimeCreate) SetCreateAt(u uint32) *LaunchTimeCreate {
	ltc.mutation.SetCreateAt(u)
	return ltc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ltc *LaunchTimeCreate) SetNillableCreateAt(u *uint32) *LaunchTimeCreate {
	if u != nil {
		ltc.SetCreateAt(*u)
	}
	return ltc
}

// SetUpdateAt sets the "update_at" field.
func (ltc *LaunchTimeCreate) SetUpdateAt(u uint32) *LaunchTimeCreate {
	ltc.mutation.SetUpdateAt(u)
	return ltc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ltc *LaunchTimeCreate) SetNillableUpdateAt(u *uint32) *LaunchTimeCreate {
	if u != nil {
		ltc.SetUpdateAt(*u)
	}
	return ltc
}

// SetDeleteAt sets the "delete_at" field.
func (ltc *LaunchTimeCreate) SetDeleteAt(u uint32) *LaunchTimeCreate {
	ltc.mutation.SetDeleteAt(u)
	return ltc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (ltc *LaunchTimeCreate) SetNillableDeleteAt(u *uint32) *LaunchTimeCreate {
	if u != nil {
		ltc.SetDeleteAt(*u)
	}
	return ltc
}

// SetID sets the "id" field.
func (ltc *LaunchTimeCreate) SetID(u uuid.UUID) *LaunchTimeCreate {
	ltc.mutation.SetID(u)
	return ltc
}

// Mutation returns the LaunchTimeMutation object of the builder.
func (ltc *LaunchTimeCreate) Mutation() *LaunchTimeMutation {
	return ltc.mutation
}

// Save creates the LaunchTime in the database.
func (ltc *LaunchTimeCreate) Save(ctx context.Context) (*LaunchTime, error) {
	var (
		err  error
		node *LaunchTime
	)
	ltc.defaults()
	if len(ltc.hooks) == 0 {
		if err = ltc.check(); err != nil {
			return nil, err
		}
		node, err = ltc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LaunchTimeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ltc.check(); err != nil {
				return nil, err
			}
			ltc.mutation = mutation
			if node, err = ltc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ltc.hooks) - 1; i >= 0; i-- {
			if ltc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ltc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ltc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ltc *LaunchTimeCreate) SaveX(ctx context.Context) *LaunchTime {
	v, err := ltc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ltc *LaunchTimeCreate) Exec(ctx context.Context) error {
	_, err := ltc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltc *LaunchTimeCreate) ExecX(ctx context.Context) {
	if err := ltc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ltc *LaunchTimeCreate) defaults() {
	if _, ok := ltc.mutation.CreateAt(); !ok {
		v := launchtime.DefaultCreateAt()
		ltc.mutation.SetCreateAt(v)
	}
	if _, ok := ltc.mutation.UpdateAt(); !ok {
		v := launchtime.DefaultUpdateAt()
		ltc.mutation.SetUpdateAt(v)
	}
	if _, ok := ltc.mutation.DeleteAt(); !ok {
		v := launchtime.DefaultDeleteAt()
		ltc.mutation.SetDeleteAt(v)
	}
	if _, ok := ltc.mutation.ID(); !ok {
		v := launchtime.DefaultID()
		ltc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ltc *LaunchTimeCreate) check() error {
	if _, ok := ltc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`ent: missing required field "project_id"`)}
	}
	if _, ok := ltc.mutation.NetworkName(); !ok {
		return &ValidationError{Name: "network_name", err: errors.New(`ent: missing required field "network_name"`)}
	}
	if _, ok := ltc.mutation.NetworkVersion(); !ok {
		return &ValidationError{Name: "network_version", err: errors.New(`ent: missing required field "network_version"`)}
	}
	if _, ok := ltc.mutation.Introduction(); !ok {
		return &ValidationError{Name: "introduction", err: errors.New(`ent: missing required field "introduction"`)}
	}
	if _, ok := ltc.mutation.LaunchTime(); !ok {
		return &ValidationError{Name: "launch_time", err: errors.New(`ent: missing required field "launch_time"`)}
	}
	if _, ok := ltc.mutation.Incentive(); !ok {
		return &ValidationError{Name: "incentive", err: errors.New(`ent: missing required field "incentive"`)}
	}
	if _, ok := ltc.mutation.IncentiveTotal(); !ok {
		return &ValidationError{Name: "incentive_total", err: errors.New(`ent: missing required field "incentive_total"`)}
	}
	if _, ok := ltc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "create_at"`)}
	}
	if _, ok := ltc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "update_at"`)}
	}
	if _, ok := ltc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "delete_at"`)}
	}
	return nil
}

func (ltc *LaunchTimeCreate) sqlSave(ctx context.Context) (*LaunchTime, error) {
	_node, _spec := ltc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ltc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (ltc *LaunchTimeCreate) createSpec() (*LaunchTime, *sqlgraph.CreateSpec) {
	var (
		_node = &LaunchTime{config: ltc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: launchtime.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: launchtime.FieldID,
			},
		}
	)
	_spec.OnConflict = ltc.conflict
	if id, ok := ltc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ltc.mutation.ProjectID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: launchtime.FieldProjectID,
		})
		_node.ProjectID = value
	}
	if value, ok := ltc.mutation.NetworkName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: launchtime.FieldNetworkName,
		})
		_node.NetworkName = value
	}
	if value, ok := ltc.mutation.NetworkVersion(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: launchtime.FieldNetworkVersion,
		})
		_node.NetworkVersion = value
	}
	if value, ok := ltc.mutation.Introduction(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: launchtime.FieldIntroduction,
		})
		_node.Introduction = value
	}
	if value, ok := ltc.mutation.LaunchTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: launchtime.FieldLaunchTime,
		})
		_node.LaunchTime = value
	}
	if value, ok := ltc.mutation.Incentive(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: launchtime.FieldIncentive,
		})
		_node.Incentive = value
	}
	if value, ok := ltc.mutation.IncentiveTotal(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: launchtime.FieldIncentiveTotal,
		})
		_node.IncentiveTotal = value
	}
	if value, ok := ltc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: launchtime.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := ltc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: launchtime.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := ltc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: launchtime.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LaunchTime.Create().
//		SetProjectID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LaunchTimeUpsert) {
//			SetProjectID(v+v).
//		}).
//		Exec(ctx)
//
func (ltc *LaunchTimeCreate) OnConflict(opts ...sql.ConflictOption) *LaunchTimeUpsertOne {
	ltc.conflict = opts
	return &LaunchTimeUpsertOne{
		create: ltc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LaunchTime.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ltc *LaunchTimeCreate) OnConflictColumns(columns ...string) *LaunchTimeUpsertOne {
	ltc.conflict = append(ltc.conflict, sql.ConflictColumns(columns...))
	return &LaunchTimeUpsertOne{
		create: ltc,
	}
}

type (
	// LaunchTimeUpsertOne is the builder for "upsert"-ing
	//  one LaunchTime node.
	LaunchTimeUpsertOne struct {
		create *LaunchTimeCreate
	}

	// LaunchTimeUpsert is the "OnConflict" setter.
	LaunchTimeUpsert struct {
		*sql.UpdateSet
	}
)

// SetProjectID sets the "project_id" field.
func (u *LaunchTimeUpsert) SetProjectID(v uuid.UUID) *LaunchTimeUpsert {
	u.Set(launchtime.FieldProjectID, v)
	return u
}

// UpdateProjectID sets the "project_id" field to the value that was provided on create.
func (u *LaunchTimeUpsert) UpdateProjectID() *LaunchTimeUpsert {
	u.SetExcluded(launchtime.FieldProjectID)
	return u
}

// SetNetworkName sets the "network_name" field.
func (u *LaunchTimeUpsert) SetNetworkName(v string) *LaunchTimeUpsert {
	u.Set(launchtime.FieldNetworkName, v)
	return u
}

// UpdateNetworkName sets the "network_name" field to the value that was provided on create.
func (u *LaunchTimeUpsert) UpdateNetworkName() *LaunchTimeUpsert {
	u.SetExcluded(launchtime.FieldNetworkName)
	return u
}

// SetNetworkVersion sets the "network_version" field.
func (u *LaunchTimeUpsert) SetNetworkVersion(v string) *LaunchTimeUpsert {
	u.Set(launchtime.FieldNetworkVersion, v)
	return u
}

// UpdateNetworkVersion sets the "network_version" field to the value that was provided on create.
func (u *LaunchTimeUpsert) UpdateNetworkVersion() *LaunchTimeUpsert {
	u.SetExcluded(launchtime.FieldNetworkVersion)
	return u
}

// SetIntroduction sets the "introduction" field.
func (u *LaunchTimeUpsert) SetIntroduction(v string) *LaunchTimeUpsert {
	u.Set(launchtime.FieldIntroduction, v)
	return u
}

// UpdateIntroduction sets the "introduction" field to the value that was provided on create.
func (u *LaunchTimeUpsert) UpdateIntroduction() *LaunchTimeUpsert {
	u.SetExcluded(launchtime.FieldIntroduction)
	return u
}

// SetLaunchTime sets the "launch_time" field.
func (u *LaunchTimeUpsert) SetLaunchTime(v uint32) *LaunchTimeUpsert {
	u.Set(launchtime.FieldLaunchTime, v)
	return u
}

// UpdateLaunchTime sets the "launch_time" field to the value that was provided on create.
func (u *LaunchTimeUpsert) UpdateLaunchTime() *LaunchTimeUpsert {
	u.SetExcluded(launchtime.FieldLaunchTime)
	return u
}

// SetIncentive sets the "incentive" field.
func (u *LaunchTimeUpsert) SetIncentive(v bool) *LaunchTimeUpsert {
	u.Set(launchtime.FieldIncentive, v)
	return u
}

// UpdateIncentive sets the "incentive" field to the value that was provided on create.
func (u *LaunchTimeUpsert) UpdateIncentive() *LaunchTimeUpsert {
	u.SetExcluded(launchtime.FieldIncentive)
	return u
}

// SetIncentiveTotal sets the "incentive_total" field.
func (u *LaunchTimeUpsert) SetIncentiveTotal(v uint32) *LaunchTimeUpsert {
	u.Set(launchtime.FieldIncentiveTotal, v)
	return u
}

// UpdateIncentiveTotal sets the "incentive_total" field to the value that was provided on create.
func (u *LaunchTimeUpsert) UpdateIncentiveTotal() *LaunchTimeUpsert {
	u.SetExcluded(launchtime.FieldIncentiveTotal)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *LaunchTimeUpsert) SetCreateAt(v uint32) *LaunchTimeUpsert {
	u.Set(launchtime.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *LaunchTimeUpsert) UpdateCreateAt() *LaunchTimeUpsert {
	u.SetExcluded(launchtime.FieldCreateAt)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *LaunchTimeUpsert) SetUpdateAt(v uint32) *LaunchTimeUpsert {
	u.Set(launchtime.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *LaunchTimeUpsert) UpdateUpdateAt() *LaunchTimeUpsert {
	u.SetExcluded(launchtime.FieldUpdateAt)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *LaunchTimeUpsert) SetDeleteAt(v uint32) *LaunchTimeUpsert {
	u.Set(launchtime.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *LaunchTimeUpsert) UpdateDeleteAt() *LaunchTimeUpsert {
	u.SetExcluded(launchtime.FieldDeleteAt)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.LaunchTime.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(launchtime.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *LaunchTimeUpsertOne) UpdateNewValues() *LaunchTimeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(launchtime.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.LaunchTime.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *LaunchTimeUpsertOne) Ignore() *LaunchTimeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LaunchTimeUpsertOne) DoNothing() *LaunchTimeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LaunchTimeCreate.OnConflict
// documentation for more info.
func (u *LaunchTimeUpsertOne) Update(set func(*LaunchTimeUpsert)) *LaunchTimeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LaunchTimeUpsert{UpdateSet: update})
	}))
	return u
}

// SetProjectID sets the "project_id" field.
func (u *LaunchTimeUpsertOne) SetProjectID(v uuid.UUID) *LaunchTimeUpsertOne {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.SetProjectID(v)
	})
}

// UpdateProjectID sets the "project_id" field to the value that was provided on create.
func (u *LaunchTimeUpsertOne) UpdateProjectID() *LaunchTimeUpsertOne {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.UpdateProjectID()
	})
}

// SetNetworkName sets the "network_name" field.
func (u *LaunchTimeUpsertOne) SetNetworkName(v string) *LaunchTimeUpsertOne {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.SetNetworkName(v)
	})
}

// UpdateNetworkName sets the "network_name" field to the value that was provided on create.
func (u *LaunchTimeUpsertOne) UpdateNetworkName() *LaunchTimeUpsertOne {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.UpdateNetworkName()
	})
}

// SetNetworkVersion sets the "network_version" field.
func (u *LaunchTimeUpsertOne) SetNetworkVersion(v string) *LaunchTimeUpsertOne {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.SetNetworkVersion(v)
	})
}

// UpdateNetworkVersion sets the "network_version" field to the value that was provided on create.
func (u *LaunchTimeUpsertOne) UpdateNetworkVersion() *LaunchTimeUpsertOne {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.UpdateNetworkVersion()
	})
}

// SetIntroduction sets the "introduction" field.
func (u *LaunchTimeUpsertOne) SetIntroduction(v string) *LaunchTimeUpsertOne {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.SetIntroduction(v)
	})
}

// UpdateIntroduction sets the "introduction" field to the value that was provided on create.
func (u *LaunchTimeUpsertOne) UpdateIntroduction() *LaunchTimeUpsertOne {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.UpdateIntroduction()
	})
}

// SetLaunchTime sets the "launch_time" field.
func (u *LaunchTimeUpsertOne) SetLaunchTime(v uint32) *LaunchTimeUpsertOne {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.SetLaunchTime(v)
	})
}

// UpdateLaunchTime sets the "launch_time" field to the value that was provided on create.
func (u *LaunchTimeUpsertOne) UpdateLaunchTime() *LaunchTimeUpsertOne {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.UpdateLaunchTime()
	})
}

// SetIncentive sets the "incentive" field.
func (u *LaunchTimeUpsertOne) SetIncentive(v bool) *LaunchTimeUpsertOne {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.SetIncentive(v)
	})
}

// UpdateIncentive sets the "incentive" field to the value that was provided on create.
func (u *LaunchTimeUpsertOne) UpdateIncentive() *LaunchTimeUpsertOne {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.UpdateIncentive()
	})
}

// SetIncentiveTotal sets the "incentive_total" field.
func (u *LaunchTimeUpsertOne) SetIncentiveTotal(v uint32) *LaunchTimeUpsertOne {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.SetIncentiveTotal(v)
	})
}

// UpdateIncentiveTotal sets the "incentive_total" field to the value that was provided on create.
func (u *LaunchTimeUpsertOne) UpdateIncentiveTotal() *LaunchTimeUpsertOne {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.UpdateIncentiveTotal()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *LaunchTimeUpsertOne) SetCreateAt(v uint32) *LaunchTimeUpsertOne {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.SetCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *LaunchTimeUpsertOne) UpdateCreateAt() *LaunchTimeUpsertOne {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *LaunchTimeUpsertOne) SetUpdateAt(v uint32) *LaunchTimeUpsertOne {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.SetUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *LaunchTimeUpsertOne) UpdateUpdateAt() *LaunchTimeUpsertOne {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *LaunchTimeUpsertOne) SetDeleteAt(v uint32) *LaunchTimeUpsertOne {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.SetDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *LaunchTimeUpsertOne) UpdateDeleteAt() *LaunchTimeUpsertOne {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *LaunchTimeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LaunchTimeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LaunchTimeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LaunchTimeUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: LaunchTimeUpsertOne.ID is not supported by MySQL driver. Use LaunchTimeUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LaunchTimeUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LaunchTimeCreateBulk is the builder for creating many LaunchTime entities in bulk.
type LaunchTimeCreateBulk struct {
	config
	builders []*LaunchTimeCreate
	conflict []sql.ConflictOption
}

// Save creates the LaunchTime entities in the database.
func (ltcb *LaunchTimeCreateBulk) Save(ctx context.Context) ([]*LaunchTime, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ltcb.builders))
	nodes := make([]*LaunchTime, len(ltcb.builders))
	mutators := make([]Mutator, len(ltcb.builders))
	for i := range ltcb.builders {
		func(i int, root context.Context) {
			builder := ltcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LaunchTimeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ltcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ltcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ltcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ltcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ltcb *LaunchTimeCreateBulk) SaveX(ctx context.Context) []*LaunchTime {
	v, err := ltcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ltcb *LaunchTimeCreateBulk) Exec(ctx context.Context) error {
	_, err := ltcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltcb *LaunchTimeCreateBulk) ExecX(ctx context.Context) {
	if err := ltcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LaunchTime.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LaunchTimeUpsert) {
//			SetProjectID(v+v).
//		}).
//		Exec(ctx)
//
func (ltcb *LaunchTimeCreateBulk) OnConflict(opts ...sql.ConflictOption) *LaunchTimeUpsertBulk {
	ltcb.conflict = opts
	return &LaunchTimeUpsertBulk{
		create: ltcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LaunchTime.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ltcb *LaunchTimeCreateBulk) OnConflictColumns(columns ...string) *LaunchTimeUpsertBulk {
	ltcb.conflict = append(ltcb.conflict, sql.ConflictColumns(columns...))
	return &LaunchTimeUpsertBulk{
		create: ltcb,
	}
}

// LaunchTimeUpsertBulk is the builder for "upsert"-ing
// a bulk of LaunchTime nodes.
type LaunchTimeUpsertBulk struct {
	create *LaunchTimeCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.LaunchTime.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(launchtime.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *LaunchTimeUpsertBulk) UpdateNewValues() *LaunchTimeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(launchtime.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LaunchTime.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *LaunchTimeUpsertBulk) Ignore() *LaunchTimeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LaunchTimeUpsertBulk) DoNothing() *LaunchTimeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LaunchTimeCreateBulk.OnConflict
// documentation for more info.
func (u *LaunchTimeUpsertBulk) Update(set func(*LaunchTimeUpsert)) *LaunchTimeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LaunchTimeUpsert{UpdateSet: update})
	}))
	return u
}

// SetProjectID sets the "project_id" field.
func (u *LaunchTimeUpsertBulk) SetProjectID(v uuid.UUID) *LaunchTimeUpsertBulk {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.SetProjectID(v)
	})
}

// UpdateProjectID sets the "project_id" field to the value that was provided on create.
func (u *LaunchTimeUpsertBulk) UpdateProjectID() *LaunchTimeUpsertBulk {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.UpdateProjectID()
	})
}

// SetNetworkName sets the "network_name" field.
func (u *LaunchTimeUpsertBulk) SetNetworkName(v string) *LaunchTimeUpsertBulk {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.SetNetworkName(v)
	})
}

// UpdateNetworkName sets the "network_name" field to the value that was provided on create.
func (u *LaunchTimeUpsertBulk) UpdateNetworkName() *LaunchTimeUpsertBulk {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.UpdateNetworkName()
	})
}

// SetNetworkVersion sets the "network_version" field.
func (u *LaunchTimeUpsertBulk) SetNetworkVersion(v string) *LaunchTimeUpsertBulk {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.SetNetworkVersion(v)
	})
}

// UpdateNetworkVersion sets the "network_version" field to the value that was provided on create.
func (u *LaunchTimeUpsertBulk) UpdateNetworkVersion() *LaunchTimeUpsertBulk {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.UpdateNetworkVersion()
	})
}

// SetIntroduction sets the "introduction" field.
func (u *LaunchTimeUpsertBulk) SetIntroduction(v string) *LaunchTimeUpsertBulk {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.SetIntroduction(v)
	})
}

// UpdateIntroduction sets the "introduction" field to the value that was provided on create.
func (u *LaunchTimeUpsertBulk) UpdateIntroduction() *LaunchTimeUpsertBulk {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.UpdateIntroduction()
	})
}

// SetLaunchTime sets the "launch_time" field.
func (u *LaunchTimeUpsertBulk) SetLaunchTime(v uint32) *LaunchTimeUpsertBulk {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.SetLaunchTime(v)
	})
}

// UpdateLaunchTime sets the "launch_time" field to the value that was provided on create.
func (u *LaunchTimeUpsertBulk) UpdateLaunchTime() *LaunchTimeUpsertBulk {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.UpdateLaunchTime()
	})
}

// SetIncentive sets the "incentive" field.
func (u *LaunchTimeUpsertBulk) SetIncentive(v bool) *LaunchTimeUpsertBulk {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.SetIncentive(v)
	})
}

// UpdateIncentive sets the "incentive" field to the value that was provided on create.
func (u *LaunchTimeUpsertBulk) UpdateIncentive() *LaunchTimeUpsertBulk {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.UpdateIncentive()
	})
}

// SetIncentiveTotal sets the "incentive_total" field.
func (u *LaunchTimeUpsertBulk) SetIncentiveTotal(v uint32) *LaunchTimeUpsertBulk {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.SetIncentiveTotal(v)
	})
}

// UpdateIncentiveTotal sets the "incentive_total" field to the value that was provided on create.
func (u *LaunchTimeUpsertBulk) UpdateIncentiveTotal() *LaunchTimeUpsertBulk {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.UpdateIncentiveTotal()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *LaunchTimeUpsertBulk) SetCreateAt(v uint32) *LaunchTimeUpsertBulk {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.SetCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *LaunchTimeUpsertBulk) UpdateCreateAt() *LaunchTimeUpsertBulk {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *LaunchTimeUpsertBulk) SetUpdateAt(v uint32) *LaunchTimeUpsertBulk {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.SetUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *LaunchTimeUpsertBulk) UpdateUpdateAt() *LaunchTimeUpsertBulk {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *LaunchTimeUpsertBulk) SetDeleteAt(v uint32) *LaunchTimeUpsertBulk {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.SetDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *LaunchTimeUpsertBulk) UpdateDeleteAt() *LaunchTimeUpsertBulk {
	return u.Update(func(s *LaunchTimeUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *LaunchTimeUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LaunchTimeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LaunchTimeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LaunchTimeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
