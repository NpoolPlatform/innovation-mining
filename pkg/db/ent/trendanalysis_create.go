// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/innovation-minning/pkg/db/ent/trendanalysis"
	"github.com/google/uuid"
)

// TrendAnalysisCreate is the builder for creating a TrendAnalysis entity.
type TrendAnalysisCreate struct {
	config
	mutation *TrendAnalysisMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetProjectID sets the "project_id" field.
func (tac *TrendAnalysisCreate) SetProjectID(u uuid.UUID) *TrendAnalysisCreate {
	tac.mutation.SetProjectID(u)
	return tac
}

// SetAuthorID sets the "author_id" field.
func (tac *TrendAnalysisCreate) SetAuthorID(u uuid.UUID) *TrendAnalysisCreate {
	tac.mutation.SetAuthorID(u)
	return tac
}

// SetTitle sets the "title" field.
func (tac *TrendAnalysisCreate) SetTitle(s string) *TrendAnalysisCreate {
	tac.mutation.SetTitle(s)
	return tac
}

// SetContent sets the "content" field.
func (tac *TrendAnalysisCreate) SetContent(s string) *TrendAnalysisCreate {
	tac.mutation.SetContent(s)
	return tac
}

// SetAbstract sets the "abstract" field.
func (tac *TrendAnalysisCreate) SetAbstract(s string) *TrendAnalysisCreate {
	tac.mutation.SetAbstract(s)
	return tac
}

// SetCreateAt sets the "create_at" field.
func (tac *TrendAnalysisCreate) SetCreateAt(u uint32) *TrendAnalysisCreate {
	tac.mutation.SetCreateAt(u)
	return tac
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (tac *TrendAnalysisCreate) SetNillableCreateAt(u *uint32) *TrendAnalysisCreate {
	if u != nil {
		tac.SetCreateAt(*u)
	}
	return tac
}

// SetUpdateAt sets the "update_at" field.
func (tac *TrendAnalysisCreate) SetUpdateAt(u uint32) *TrendAnalysisCreate {
	tac.mutation.SetUpdateAt(u)
	return tac
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (tac *TrendAnalysisCreate) SetNillableUpdateAt(u *uint32) *TrendAnalysisCreate {
	if u != nil {
		tac.SetUpdateAt(*u)
	}
	return tac
}

// SetDeleteAt sets the "delete_at" field.
func (tac *TrendAnalysisCreate) SetDeleteAt(u uint32) *TrendAnalysisCreate {
	tac.mutation.SetDeleteAt(u)
	return tac
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (tac *TrendAnalysisCreate) SetNillableDeleteAt(u *uint32) *TrendAnalysisCreate {
	if u != nil {
		tac.SetDeleteAt(*u)
	}
	return tac
}

// SetID sets the "id" field.
func (tac *TrendAnalysisCreate) SetID(u uuid.UUID) *TrendAnalysisCreate {
	tac.mutation.SetID(u)
	return tac
}

// Mutation returns the TrendAnalysisMutation object of the builder.
func (tac *TrendAnalysisCreate) Mutation() *TrendAnalysisMutation {
	return tac.mutation
}

// Save creates the TrendAnalysis in the database.
func (tac *TrendAnalysisCreate) Save(ctx context.Context) (*TrendAnalysis, error) {
	var (
		err  error
		node *TrendAnalysis
	)
	tac.defaults()
	if len(tac.hooks) == 0 {
		if err = tac.check(); err != nil {
			return nil, err
		}
		node, err = tac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TrendAnalysisMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tac.check(); err != nil {
				return nil, err
			}
			tac.mutation = mutation
			if node, err = tac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tac.hooks) - 1; i >= 0; i-- {
			if tac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tac *TrendAnalysisCreate) SaveX(ctx context.Context) *TrendAnalysis {
	v, err := tac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tac *TrendAnalysisCreate) Exec(ctx context.Context) error {
	_, err := tac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tac *TrendAnalysisCreate) ExecX(ctx context.Context) {
	if err := tac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tac *TrendAnalysisCreate) defaults() {
	if _, ok := tac.mutation.CreateAt(); !ok {
		v := trendanalysis.DefaultCreateAt()
		tac.mutation.SetCreateAt(v)
	}
	if _, ok := tac.mutation.UpdateAt(); !ok {
		v := trendanalysis.DefaultUpdateAt()
		tac.mutation.SetUpdateAt(v)
	}
	if _, ok := tac.mutation.DeleteAt(); !ok {
		v := trendanalysis.DefaultDeleteAt()
		tac.mutation.SetDeleteAt(v)
	}
	if _, ok := tac.mutation.ID(); !ok {
		v := trendanalysis.DefaultID()
		tac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tac *TrendAnalysisCreate) check() error {
	if _, ok := tac.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`ent: missing required field "project_id"`)}
	}
	if _, ok := tac.mutation.AuthorID(); !ok {
		return &ValidationError{Name: "author_id", err: errors.New(`ent: missing required field "author_id"`)}
	}
	if _, ok := tac.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "title"`)}
	}
	if _, ok := tac.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "content"`)}
	}
	if _, ok := tac.mutation.Abstract(); !ok {
		return &ValidationError{Name: "abstract", err: errors.New(`ent: missing required field "abstract"`)}
	}
	if _, ok := tac.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "create_at"`)}
	}
	if _, ok := tac.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "update_at"`)}
	}
	if _, ok := tac.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "delete_at"`)}
	}
	return nil
}

func (tac *TrendAnalysisCreate) sqlSave(ctx context.Context) (*TrendAnalysis, error) {
	_node, _spec := tac.createSpec()
	if err := sqlgraph.CreateNode(ctx, tac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (tac *TrendAnalysisCreate) createSpec() (*TrendAnalysis, *sqlgraph.CreateSpec) {
	var (
		_node = &TrendAnalysis{config: tac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: trendanalysis.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: trendanalysis.FieldID,
			},
		}
	)
	_spec.OnConflict = tac.conflict
	if id, ok := tac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tac.mutation.ProjectID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: trendanalysis.FieldProjectID,
		})
		_node.ProjectID = value
	}
	if value, ok := tac.mutation.AuthorID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: trendanalysis.FieldAuthorID,
		})
		_node.AuthorID = value
	}
	if value, ok := tac.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: trendanalysis.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := tac.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: trendanalysis.FieldContent,
		})
		_node.Content = value
	}
	if value, ok := tac.mutation.Abstract(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: trendanalysis.FieldAbstract,
		})
		_node.Abstract = value
	}
	if value, ok := tac.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: trendanalysis.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := tac.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: trendanalysis.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := tac.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: trendanalysis.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TrendAnalysis.Create().
//		SetProjectID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TrendAnalysisUpsert) {
//			SetProjectID(v+v).
//		}).
//		Exec(ctx)
//
func (tac *TrendAnalysisCreate) OnConflict(opts ...sql.ConflictOption) *TrendAnalysisUpsertOne {
	tac.conflict = opts
	return &TrendAnalysisUpsertOne{
		create: tac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TrendAnalysis.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tac *TrendAnalysisCreate) OnConflictColumns(columns ...string) *TrendAnalysisUpsertOne {
	tac.conflict = append(tac.conflict, sql.ConflictColumns(columns...))
	return &TrendAnalysisUpsertOne{
		create: tac,
	}
}

type (
	// TrendAnalysisUpsertOne is the builder for "upsert"-ing
	//  one TrendAnalysis node.
	TrendAnalysisUpsertOne struct {
		create *TrendAnalysisCreate
	}

	// TrendAnalysisUpsert is the "OnConflict" setter.
	TrendAnalysisUpsert struct {
		*sql.UpdateSet
	}
)

// SetProjectID sets the "project_id" field.
func (u *TrendAnalysisUpsert) SetProjectID(v uuid.UUID) *TrendAnalysisUpsert {
	u.Set(trendanalysis.FieldProjectID, v)
	return u
}

// UpdateProjectID sets the "project_id" field to the value that was provided on create.
func (u *TrendAnalysisUpsert) UpdateProjectID() *TrendAnalysisUpsert {
	u.SetExcluded(trendanalysis.FieldProjectID)
	return u
}

// SetAuthorID sets the "author_id" field.
func (u *TrendAnalysisUpsert) SetAuthorID(v uuid.UUID) *TrendAnalysisUpsert {
	u.Set(trendanalysis.FieldAuthorID, v)
	return u
}

// UpdateAuthorID sets the "author_id" field to the value that was provided on create.
func (u *TrendAnalysisUpsert) UpdateAuthorID() *TrendAnalysisUpsert {
	u.SetExcluded(trendanalysis.FieldAuthorID)
	return u
}

// SetTitle sets the "title" field.
func (u *TrendAnalysisUpsert) SetTitle(v string) *TrendAnalysisUpsert {
	u.Set(trendanalysis.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TrendAnalysisUpsert) UpdateTitle() *TrendAnalysisUpsert {
	u.SetExcluded(trendanalysis.FieldTitle)
	return u
}

// SetContent sets the "content" field.
func (u *TrendAnalysisUpsert) SetContent(v string) *TrendAnalysisUpsert {
	u.Set(trendanalysis.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *TrendAnalysisUpsert) UpdateContent() *TrendAnalysisUpsert {
	u.SetExcluded(trendanalysis.FieldContent)
	return u
}

// SetAbstract sets the "abstract" field.
func (u *TrendAnalysisUpsert) SetAbstract(v string) *TrendAnalysisUpsert {
	u.Set(trendanalysis.FieldAbstract, v)
	return u
}

// UpdateAbstract sets the "abstract" field to the value that was provided on create.
func (u *TrendAnalysisUpsert) UpdateAbstract() *TrendAnalysisUpsert {
	u.SetExcluded(trendanalysis.FieldAbstract)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *TrendAnalysisUpsert) SetCreateAt(v uint32) *TrendAnalysisUpsert {
	u.Set(trendanalysis.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *TrendAnalysisUpsert) UpdateCreateAt() *TrendAnalysisUpsert {
	u.SetExcluded(trendanalysis.FieldCreateAt)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *TrendAnalysisUpsert) SetUpdateAt(v uint32) *TrendAnalysisUpsert {
	u.Set(trendanalysis.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *TrendAnalysisUpsert) UpdateUpdateAt() *TrendAnalysisUpsert {
	u.SetExcluded(trendanalysis.FieldUpdateAt)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *TrendAnalysisUpsert) SetDeleteAt(v uint32) *TrendAnalysisUpsert {
	u.Set(trendanalysis.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *TrendAnalysisUpsert) UpdateDeleteAt() *TrendAnalysisUpsert {
	u.SetExcluded(trendanalysis.FieldDeleteAt)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TrendAnalysis.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(trendanalysis.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TrendAnalysisUpsertOne) UpdateNewValues() *TrendAnalysisUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(trendanalysis.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.TrendAnalysis.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *TrendAnalysisUpsertOne) Ignore() *TrendAnalysisUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TrendAnalysisUpsertOne) DoNothing() *TrendAnalysisUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TrendAnalysisCreate.OnConflict
// documentation for more info.
func (u *TrendAnalysisUpsertOne) Update(set func(*TrendAnalysisUpsert)) *TrendAnalysisUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TrendAnalysisUpsert{UpdateSet: update})
	}))
	return u
}

// SetProjectID sets the "project_id" field.
func (u *TrendAnalysisUpsertOne) SetProjectID(v uuid.UUID) *TrendAnalysisUpsertOne {
	return u.Update(func(s *TrendAnalysisUpsert) {
		s.SetProjectID(v)
	})
}

// UpdateProjectID sets the "project_id" field to the value that was provided on create.
func (u *TrendAnalysisUpsertOne) UpdateProjectID() *TrendAnalysisUpsertOne {
	return u.Update(func(s *TrendAnalysisUpsert) {
		s.UpdateProjectID()
	})
}

// SetAuthorID sets the "author_id" field.
func (u *TrendAnalysisUpsertOne) SetAuthorID(v uuid.UUID) *TrendAnalysisUpsertOne {
	return u.Update(func(s *TrendAnalysisUpsert) {
		s.SetAuthorID(v)
	})
}

// UpdateAuthorID sets the "author_id" field to the value that was provided on create.
func (u *TrendAnalysisUpsertOne) UpdateAuthorID() *TrendAnalysisUpsertOne {
	return u.Update(func(s *TrendAnalysisUpsert) {
		s.UpdateAuthorID()
	})
}

// SetTitle sets the "title" field.
func (u *TrendAnalysisUpsertOne) SetTitle(v string) *TrendAnalysisUpsertOne {
	return u.Update(func(s *TrendAnalysisUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TrendAnalysisUpsertOne) UpdateTitle() *TrendAnalysisUpsertOne {
	return u.Update(func(s *TrendAnalysisUpsert) {
		s.UpdateTitle()
	})
}

// SetContent sets the "content" field.
func (u *TrendAnalysisUpsertOne) SetContent(v string) *TrendAnalysisUpsertOne {
	return u.Update(func(s *TrendAnalysisUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *TrendAnalysisUpsertOne) UpdateContent() *TrendAnalysisUpsertOne {
	return u.Update(func(s *TrendAnalysisUpsert) {
		s.UpdateContent()
	})
}

// SetAbstract sets the "abstract" field.
func (u *TrendAnalysisUpsertOne) SetAbstract(v string) *TrendAnalysisUpsertOne {
	return u.Update(func(s *TrendAnalysisUpsert) {
		s.SetAbstract(v)
	})
}

// UpdateAbstract sets the "abstract" field to the value that was provided on create.
func (u *TrendAnalysisUpsertOne) UpdateAbstract() *TrendAnalysisUpsertOne {
	return u.Update(func(s *TrendAnalysisUpsert) {
		s.UpdateAbstract()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *TrendAnalysisUpsertOne) SetCreateAt(v uint32) *TrendAnalysisUpsertOne {
	return u.Update(func(s *TrendAnalysisUpsert) {
		s.SetCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *TrendAnalysisUpsertOne) UpdateCreateAt() *TrendAnalysisUpsertOne {
	return u.Update(func(s *TrendAnalysisUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *TrendAnalysisUpsertOne) SetUpdateAt(v uint32) *TrendAnalysisUpsertOne {
	return u.Update(func(s *TrendAnalysisUpsert) {
		s.SetUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *TrendAnalysisUpsertOne) UpdateUpdateAt() *TrendAnalysisUpsertOne {
	return u.Update(func(s *TrendAnalysisUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *TrendAnalysisUpsertOne) SetDeleteAt(v uint32) *TrendAnalysisUpsertOne {
	return u.Update(func(s *TrendAnalysisUpsert) {
		s.SetDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *TrendAnalysisUpsertOne) UpdateDeleteAt() *TrendAnalysisUpsertOne {
	return u.Update(func(s *TrendAnalysisUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *TrendAnalysisUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TrendAnalysisCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TrendAnalysisUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TrendAnalysisUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TrendAnalysisUpsertOne.ID is not supported by MySQL driver. Use TrendAnalysisUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TrendAnalysisUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TrendAnalysisCreateBulk is the builder for creating many TrendAnalysis entities in bulk.
type TrendAnalysisCreateBulk struct {
	config
	builders []*TrendAnalysisCreate
	conflict []sql.ConflictOption
}

// Save creates the TrendAnalysis entities in the database.
func (tacb *TrendAnalysisCreateBulk) Save(ctx context.Context) ([]*TrendAnalysis, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tacb.builders))
	nodes := make([]*TrendAnalysis, len(tacb.builders))
	mutators := make([]Mutator, len(tacb.builders))
	for i := range tacb.builders {
		func(i int, root context.Context) {
			builder := tacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TrendAnalysisMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tacb *TrendAnalysisCreateBulk) SaveX(ctx context.Context) []*TrendAnalysis {
	v, err := tacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tacb *TrendAnalysisCreateBulk) Exec(ctx context.Context) error {
	_, err := tacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tacb *TrendAnalysisCreateBulk) ExecX(ctx context.Context) {
	if err := tacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TrendAnalysis.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TrendAnalysisUpsert) {
//			SetProjectID(v+v).
//		}).
//		Exec(ctx)
//
func (tacb *TrendAnalysisCreateBulk) OnConflict(opts ...sql.ConflictOption) *TrendAnalysisUpsertBulk {
	tacb.conflict = opts
	return &TrendAnalysisUpsertBulk{
		create: tacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TrendAnalysis.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tacb *TrendAnalysisCreateBulk) OnConflictColumns(columns ...string) *TrendAnalysisUpsertBulk {
	tacb.conflict = append(tacb.conflict, sql.ConflictColumns(columns...))
	return &TrendAnalysisUpsertBulk{
		create: tacb,
	}
}

// TrendAnalysisUpsertBulk is the builder for "upsert"-ing
// a bulk of TrendAnalysis nodes.
type TrendAnalysisUpsertBulk struct {
	create *TrendAnalysisCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TrendAnalysis.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(trendanalysis.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TrendAnalysisUpsertBulk) UpdateNewValues() *TrendAnalysisUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(trendanalysis.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TrendAnalysis.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *TrendAnalysisUpsertBulk) Ignore() *TrendAnalysisUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TrendAnalysisUpsertBulk) DoNothing() *TrendAnalysisUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TrendAnalysisCreateBulk.OnConflict
// documentation for more info.
func (u *TrendAnalysisUpsertBulk) Update(set func(*TrendAnalysisUpsert)) *TrendAnalysisUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TrendAnalysisUpsert{UpdateSet: update})
	}))
	return u
}

// SetProjectID sets the "project_id" field.
func (u *TrendAnalysisUpsertBulk) SetProjectID(v uuid.UUID) *TrendAnalysisUpsertBulk {
	return u.Update(func(s *TrendAnalysisUpsert) {
		s.SetProjectID(v)
	})
}

// UpdateProjectID sets the "project_id" field to the value that was provided on create.
func (u *TrendAnalysisUpsertBulk) UpdateProjectID() *TrendAnalysisUpsertBulk {
	return u.Update(func(s *TrendAnalysisUpsert) {
		s.UpdateProjectID()
	})
}

// SetAuthorID sets the "author_id" field.
func (u *TrendAnalysisUpsertBulk) SetAuthorID(v uuid.UUID) *TrendAnalysisUpsertBulk {
	return u.Update(func(s *TrendAnalysisUpsert) {
		s.SetAuthorID(v)
	})
}

// UpdateAuthorID sets the "author_id" field to the value that was provided on create.
func (u *TrendAnalysisUpsertBulk) UpdateAuthorID() *TrendAnalysisUpsertBulk {
	return u.Update(func(s *TrendAnalysisUpsert) {
		s.UpdateAuthorID()
	})
}

// SetTitle sets the "title" field.
func (u *TrendAnalysisUpsertBulk) SetTitle(v string) *TrendAnalysisUpsertBulk {
	return u.Update(func(s *TrendAnalysisUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TrendAnalysisUpsertBulk) UpdateTitle() *TrendAnalysisUpsertBulk {
	return u.Update(func(s *TrendAnalysisUpsert) {
		s.UpdateTitle()
	})
}

// SetContent sets the "content" field.
func (u *TrendAnalysisUpsertBulk) SetContent(v string) *TrendAnalysisUpsertBulk {
	return u.Update(func(s *TrendAnalysisUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *TrendAnalysisUpsertBulk) UpdateContent() *TrendAnalysisUpsertBulk {
	return u.Update(func(s *TrendAnalysisUpsert) {
		s.UpdateContent()
	})
}

// SetAbstract sets the "abstract" field.
func (u *TrendAnalysisUpsertBulk) SetAbstract(v string) *TrendAnalysisUpsertBulk {
	return u.Update(func(s *TrendAnalysisUpsert) {
		s.SetAbstract(v)
	})
}

// UpdateAbstract sets the "abstract" field to the value that was provided on create.
func (u *TrendAnalysisUpsertBulk) UpdateAbstract() *TrendAnalysisUpsertBulk {
	return u.Update(func(s *TrendAnalysisUpsert) {
		s.UpdateAbstract()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *TrendAnalysisUpsertBulk) SetCreateAt(v uint32) *TrendAnalysisUpsertBulk {
	return u.Update(func(s *TrendAnalysisUpsert) {
		s.SetCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *TrendAnalysisUpsertBulk) UpdateCreateAt() *TrendAnalysisUpsertBulk {
	return u.Update(func(s *TrendAnalysisUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *TrendAnalysisUpsertBulk) SetUpdateAt(v uint32) *TrendAnalysisUpsertBulk {
	return u.Update(func(s *TrendAnalysisUpsert) {
		s.SetUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *TrendAnalysisUpsertBulk) UpdateUpdateAt() *TrendAnalysisUpsertBulk {
	return u.Update(func(s *TrendAnalysisUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *TrendAnalysisUpsertBulk) SetDeleteAt(v uint32) *TrendAnalysisUpsertBulk {
	return u.Update(func(s *TrendAnalysisUpsert) {
		s.SetDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *TrendAnalysisUpsertBulk) UpdateDeleteAt() *TrendAnalysisUpsertBulk {
	return u.Update(func(s *TrendAnalysisUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *TrendAnalysisUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TrendAnalysisCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TrendAnalysisCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TrendAnalysisUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
