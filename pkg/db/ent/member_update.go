// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/innovation-mining/pkg/db/ent/member"
	"github.com/NpoolPlatform/innovation-mining/pkg/db/ent/predicate"
)

// MemberUpdate is the builder for updating Member entities.
type MemberUpdate struct {
	config
	hooks    []Hook
	mutation *MemberMutation
}

// Where appends a list predicates to the MemberUpdate builder.
func (mu *MemberUpdate) Where(ps ...predicate.Member) *MemberUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetFirstName sets the "first_name" field.
func (mu *MemberUpdate) SetFirstName(s string) *MemberUpdate {
	mu.mutation.SetFirstName(s)
	return mu
}

// SetLastName sets the "last_name" field.
func (mu *MemberUpdate) SetLastName(s string) *MemberUpdate {
	mu.mutation.SetLastName(s)
	return mu
}

// SetIntroduction sets the "introduction" field.
func (mu *MemberUpdate) SetIntroduction(s string) *MemberUpdate {
	mu.mutation.SetIntroduction(s)
	return mu
}

// SetCreateAt sets the "create_at" field.
func (mu *MemberUpdate) SetCreateAt(u uint32) *MemberUpdate {
	mu.mutation.ResetCreateAt()
	mu.mutation.SetCreateAt(u)
	return mu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableCreateAt(u *uint32) *MemberUpdate {
	if u != nil {
		mu.SetCreateAt(*u)
	}
	return mu
}

// AddCreateAt adds u to the "create_at" field.
func (mu *MemberUpdate) AddCreateAt(u uint32) *MemberUpdate {
	mu.mutation.AddCreateAt(u)
	return mu
}

// SetUpdateAt sets the "update_at" field.
func (mu *MemberUpdate) SetUpdateAt(u uint32) *MemberUpdate {
	mu.mutation.ResetUpdateAt()
	mu.mutation.SetUpdateAt(u)
	return mu
}

// AddUpdateAt adds u to the "update_at" field.
func (mu *MemberUpdate) AddUpdateAt(u uint32) *MemberUpdate {
	mu.mutation.AddUpdateAt(u)
	return mu
}

// SetDeleteAt sets the "delete_at" field.
func (mu *MemberUpdate) SetDeleteAt(u uint32) *MemberUpdate {
	mu.mutation.ResetDeleteAt()
	mu.mutation.SetDeleteAt(u)
	return mu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableDeleteAt(u *uint32) *MemberUpdate {
	if u != nil {
		mu.SetDeleteAt(*u)
	}
	return mu
}

// AddDeleteAt adds u to the "delete_at" field.
func (mu *MemberUpdate) AddDeleteAt(u uint32) *MemberUpdate {
	mu.mutation.AddDeleteAt(u)
	return mu
}

// Mutation returns the MemberMutation object of the builder.
func (mu *MemberUpdate) Mutation() *MemberMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MemberUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	mu.defaults()
	if len(mu.hooks) == 0 {
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MemberMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			if mu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MemberUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MemberUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MemberUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MemberUpdate) defaults() {
	if _, ok := mu.mutation.UpdateAt(); !ok {
		v := member.UpdateDefaultUpdateAt()
		mu.mutation.SetUpdateAt(v)
	}
}

func (mu *MemberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   member.Table,
			Columns: member.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: member.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.FirstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: member.FieldFirstName,
		})
	}
	if value, ok := mu.mutation.LastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: member.FieldLastName,
		})
	}
	if value, ok := mu.mutation.Introduction(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: member.FieldIntroduction,
		})
	}
	if value, ok := mu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: member.FieldCreateAt,
		})
	}
	if value, ok := mu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: member.FieldCreateAt,
		})
	}
	if value, ok := mu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: member.FieldUpdateAt,
		})
	}
	if value, ok := mu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: member.FieldUpdateAt,
		})
	}
	if value, ok := mu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: member.FieldDeleteAt,
		})
	}
	if value, ok := mu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: member.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{member.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// MemberUpdateOne is the builder for updating a single Member entity.
type MemberUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemberMutation
}

// SetFirstName sets the "first_name" field.
func (muo *MemberUpdateOne) SetFirstName(s string) *MemberUpdateOne {
	muo.mutation.SetFirstName(s)
	return muo
}

// SetLastName sets the "last_name" field.
func (muo *MemberUpdateOne) SetLastName(s string) *MemberUpdateOne {
	muo.mutation.SetLastName(s)
	return muo
}

// SetIntroduction sets the "introduction" field.
func (muo *MemberUpdateOne) SetIntroduction(s string) *MemberUpdateOne {
	muo.mutation.SetIntroduction(s)
	return muo
}

// SetCreateAt sets the "create_at" field.
func (muo *MemberUpdateOne) SetCreateAt(u uint32) *MemberUpdateOne {
	muo.mutation.ResetCreateAt()
	muo.mutation.SetCreateAt(u)
	return muo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableCreateAt(u *uint32) *MemberUpdateOne {
	if u != nil {
		muo.SetCreateAt(*u)
	}
	return muo
}

// AddCreateAt adds u to the "create_at" field.
func (muo *MemberUpdateOne) AddCreateAt(u uint32) *MemberUpdateOne {
	muo.mutation.AddCreateAt(u)
	return muo
}

// SetUpdateAt sets the "update_at" field.
func (muo *MemberUpdateOne) SetUpdateAt(u uint32) *MemberUpdateOne {
	muo.mutation.ResetUpdateAt()
	muo.mutation.SetUpdateAt(u)
	return muo
}

// AddUpdateAt adds u to the "update_at" field.
func (muo *MemberUpdateOne) AddUpdateAt(u uint32) *MemberUpdateOne {
	muo.mutation.AddUpdateAt(u)
	return muo
}

// SetDeleteAt sets the "delete_at" field.
func (muo *MemberUpdateOne) SetDeleteAt(u uint32) *MemberUpdateOne {
	muo.mutation.ResetDeleteAt()
	muo.mutation.SetDeleteAt(u)
	return muo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableDeleteAt(u *uint32) *MemberUpdateOne {
	if u != nil {
		muo.SetDeleteAt(*u)
	}
	return muo
}

// AddDeleteAt adds u to the "delete_at" field.
func (muo *MemberUpdateOne) AddDeleteAt(u uint32) *MemberUpdateOne {
	muo.mutation.AddDeleteAt(u)
	return muo
}

// Mutation returns the MemberMutation object of the builder.
func (muo *MemberUpdateOne) Mutation() *MemberMutation {
	return muo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MemberUpdateOne) Select(field string, fields ...string) *MemberUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Member entity.
func (muo *MemberUpdateOne) Save(ctx context.Context) (*Member, error) {
	var (
		err  error
		node *Member
	)
	muo.defaults()
	if len(muo.hooks) == 0 {
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MemberMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			if muo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MemberUpdateOne) SaveX(ctx context.Context) *Member {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MemberUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MemberUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MemberUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdateAt(); !ok {
		v := member.UpdateDefaultUpdateAt()
		muo.mutation.SetUpdateAt(v)
	}
}

func (muo *MemberUpdateOne) sqlSave(ctx context.Context) (_node *Member, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   member.Table,
			Columns: member.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: member.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Member.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, member.FieldID)
		for _, f := range fields {
			if !member.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != member.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.FirstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: member.FieldFirstName,
		})
	}
	if value, ok := muo.mutation.LastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: member.FieldLastName,
		})
	}
	if value, ok := muo.mutation.Introduction(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: member.FieldIntroduction,
		})
	}
	if value, ok := muo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: member.FieldCreateAt,
		})
	}
	if value, ok := muo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: member.FieldCreateAt,
		})
	}
	if value, ok := muo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: member.FieldUpdateAt,
		})
	}
	if value, ok := muo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: member.FieldUpdateAt,
		})
	}
	if value, ok := muo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: member.FieldDeleteAt,
		})
	}
	if value, ok := muo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: member.FieldDeleteAt,
		})
	}
	_node = &Member{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{member.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
