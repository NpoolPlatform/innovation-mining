// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/innovation-mining/pkg/db/ent/launchtime"
	"github.com/NpoolPlatform/innovation-mining/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// LaunchTimeUpdate is the builder for updating LaunchTime entities.
type LaunchTimeUpdate struct {
	config
	hooks    []Hook
	mutation *LaunchTimeMutation
}

// Where appends a list predicates to the LaunchTimeUpdate builder.
func (ltu *LaunchTimeUpdate) Where(ps ...predicate.LaunchTime) *LaunchTimeUpdate {
	ltu.mutation.Where(ps...)
	return ltu
}

// SetProjectID sets the "project_id" field.
func (ltu *LaunchTimeUpdate) SetProjectID(u uuid.UUID) *LaunchTimeUpdate {
	ltu.mutation.SetProjectID(u)
	return ltu
}

// SetNetworkName sets the "network_name" field.
func (ltu *LaunchTimeUpdate) SetNetworkName(s string) *LaunchTimeUpdate {
	ltu.mutation.SetNetworkName(s)
	return ltu
}

// SetNetworkVersion sets the "network_version" field.
func (ltu *LaunchTimeUpdate) SetNetworkVersion(s string) *LaunchTimeUpdate {
	ltu.mutation.SetNetworkVersion(s)
	return ltu
}

// SetIntroduction sets the "introduction" field.
func (ltu *LaunchTimeUpdate) SetIntroduction(s string) *LaunchTimeUpdate {
	ltu.mutation.SetIntroduction(s)
	return ltu
}

// SetLaunchTime sets the "launch_time" field.
func (ltu *LaunchTimeUpdate) SetLaunchTime(u uint32) *LaunchTimeUpdate {
	ltu.mutation.ResetLaunchTime()
	ltu.mutation.SetLaunchTime(u)
	return ltu
}

// AddLaunchTime adds u to the "launch_time" field.
func (ltu *LaunchTimeUpdate) AddLaunchTime(u uint32) *LaunchTimeUpdate {
	ltu.mutation.AddLaunchTime(u)
	return ltu
}

// SetIncentive sets the "incentive" field.
func (ltu *LaunchTimeUpdate) SetIncentive(b bool) *LaunchTimeUpdate {
	ltu.mutation.SetIncentive(b)
	return ltu
}

// SetIncentiveTotal sets the "incentive_total" field.
func (ltu *LaunchTimeUpdate) SetIncentiveTotal(u uint32) *LaunchTimeUpdate {
	ltu.mutation.ResetIncentiveTotal()
	ltu.mutation.SetIncentiveTotal(u)
	return ltu
}

// AddIncentiveTotal adds u to the "incentive_total" field.
func (ltu *LaunchTimeUpdate) AddIncentiveTotal(u uint32) *LaunchTimeUpdate {
	ltu.mutation.AddIncentiveTotal(u)
	return ltu
}

// SetCreateAt sets the "create_at" field.
func (ltu *LaunchTimeUpdate) SetCreateAt(u uint32) *LaunchTimeUpdate {
	ltu.mutation.ResetCreateAt()
	ltu.mutation.SetCreateAt(u)
	return ltu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ltu *LaunchTimeUpdate) SetNillableCreateAt(u *uint32) *LaunchTimeUpdate {
	if u != nil {
		ltu.SetCreateAt(*u)
	}
	return ltu
}

// AddCreateAt adds u to the "create_at" field.
func (ltu *LaunchTimeUpdate) AddCreateAt(u uint32) *LaunchTimeUpdate {
	ltu.mutation.AddCreateAt(u)
	return ltu
}

// SetUpdateAt sets the "update_at" field.
func (ltu *LaunchTimeUpdate) SetUpdateAt(u uint32) *LaunchTimeUpdate {
	ltu.mutation.ResetUpdateAt()
	ltu.mutation.SetUpdateAt(u)
	return ltu
}

// AddUpdateAt adds u to the "update_at" field.
func (ltu *LaunchTimeUpdate) AddUpdateAt(u uint32) *LaunchTimeUpdate {
	ltu.mutation.AddUpdateAt(u)
	return ltu
}

// SetDeleteAt sets the "delete_at" field.
func (ltu *LaunchTimeUpdate) SetDeleteAt(u uint32) *LaunchTimeUpdate {
	ltu.mutation.ResetDeleteAt()
	ltu.mutation.SetDeleteAt(u)
	return ltu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (ltu *LaunchTimeUpdate) SetNillableDeleteAt(u *uint32) *LaunchTimeUpdate {
	if u != nil {
		ltu.SetDeleteAt(*u)
	}
	return ltu
}

// AddDeleteAt adds u to the "delete_at" field.
func (ltu *LaunchTimeUpdate) AddDeleteAt(u uint32) *LaunchTimeUpdate {
	ltu.mutation.AddDeleteAt(u)
	return ltu
}

// Mutation returns the LaunchTimeMutation object of the builder.
func (ltu *LaunchTimeUpdate) Mutation() *LaunchTimeMutation {
	return ltu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ltu *LaunchTimeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ltu.defaults()
	if len(ltu.hooks) == 0 {
		affected, err = ltu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LaunchTimeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ltu.mutation = mutation
			affected, err = ltu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ltu.hooks) - 1; i >= 0; i-- {
			if ltu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ltu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ltu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ltu *LaunchTimeUpdate) SaveX(ctx context.Context) int {
	affected, err := ltu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ltu *LaunchTimeUpdate) Exec(ctx context.Context) error {
	_, err := ltu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltu *LaunchTimeUpdate) ExecX(ctx context.Context) {
	if err := ltu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ltu *LaunchTimeUpdate) defaults() {
	if _, ok := ltu.mutation.UpdateAt(); !ok {
		v := launchtime.UpdateDefaultUpdateAt()
		ltu.mutation.SetUpdateAt(v)
	}
}

func (ltu *LaunchTimeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   launchtime.Table,
			Columns: launchtime.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: launchtime.FieldID,
			},
		},
	}
	if ps := ltu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ltu.mutation.ProjectID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: launchtime.FieldProjectID,
		})
	}
	if value, ok := ltu.mutation.NetworkName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: launchtime.FieldNetworkName,
		})
	}
	if value, ok := ltu.mutation.NetworkVersion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: launchtime.FieldNetworkVersion,
		})
	}
	if value, ok := ltu.mutation.Introduction(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: launchtime.FieldIntroduction,
		})
	}
	if value, ok := ltu.mutation.LaunchTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: launchtime.FieldLaunchTime,
		})
	}
	if value, ok := ltu.mutation.AddedLaunchTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: launchtime.FieldLaunchTime,
		})
	}
	if value, ok := ltu.mutation.Incentive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: launchtime.FieldIncentive,
		})
	}
	if value, ok := ltu.mutation.IncentiveTotal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: launchtime.FieldIncentiveTotal,
		})
	}
	if value, ok := ltu.mutation.AddedIncentiveTotal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: launchtime.FieldIncentiveTotal,
		})
	}
	if value, ok := ltu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: launchtime.FieldCreateAt,
		})
	}
	if value, ok := ltu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: launchtime.FieldCreateAt,
		})
	}
	if value, ok := ltu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: launchtime.FieldUpdateAt,
		})
	}
	if value, ok := ltu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: launchtime.FieldUpdateAt,
		})
	}
	if value, ok := ltu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: launchtime.FieldDeleteAt,
		})
	}
	if value, ok := ltu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: launchtime.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ltu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{launchtime.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// LaunchTimeUpdateOne is the builder for updating a single LaunchTime entity.
type LaunchTimeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LaunchTimeMutation
}

// SetProjectID sets the "project_id" field.
func (ltuo *LaunchTimeUpdateOne) SetProjectID(u uuid.UUID) *LaunchTimeUpdateOne {
	ltuo.mutation.SetProjectID(u)
	return ltuo
}

// SetNetworkName sets the "network_name" field.
func (ltuo *LaunchTimeUpdateOne) SetNetworkName(s string) *LaunchTimeUpdateOne {
	ltuo.mutation.SetNetworkName(s)
	return ltuo
}

// SetNetworkVersion sets the "network_version" field.
func (ltuo *LaunchTimeUpdateOne) SetNetworkVersion(s string) *LaunchTimeUpdateOne {
	ltuo.mutation.SetNetworkVersion(s)
	return ltuo
}

// SetIntroduction sets the "introduction" field.
func (ltuo *LaunchTimeUpdateOne) SetIntroduction(s string) *LaunchTimeUpdateOne {
	ltuo.mutation.SetIntroduction(s)
	return ltuo
}

// SetLaunchTime sets the "launch_time" field.
func (ltuo *LaunchTimeUpdateOne) SetLaunchTime(u uint32) *LaunchTimeUpdateOne {
	ltuo.mutation.ResetLaunchTime()
	ltuo.mutation.SetLaunchTime(u)
	return ltuo
}

// AddLaunchTime adds u to the "launch_time" field.
func (ltuo *LaunchTimeUpdateOne) AddLaunchTime(u uint32) *LaunchTimeUpdateOne {
	ltuo.mutation.AddLaunchTime(u)
	return ltuo
}

// SetIncentive sets the "incentive" field.
func (ltuo *LaunchTimeUpdateOne) SetIncentive(b bool) *LaunchTimeUpdateOne {
	ltuo.mutation.SetIncentive(b)
	return ltuo
}

// SetIncentiveTotal sets the "incentive_total" field.
func (ltuo *LaunchTimeUpdateOne) SetIncentiveTotal(u uint32) *LaunchTimeUpdateOne {
	ltuo.mutation.ResetIncentiveTotal()
	ltuo.mutation.SetIncentiveTotal(u)
	return ltuo
}

// AddIncentiveTotal adds u to the "incentive_total" field.
func (ltuo *LaunchTimeUpdateOne) AddIncentiveTotal(u uint32) *LaunchTimeUpdateOne {
	ltuo.mutation.AddIncentiveTotal(u)
	return ltuo
}

// SetCreateAt sets the "create_at" field.
func (ltuo *LaunchTimeUpdateOne) SetCreateAt(u uint32) *LaunchTimeUpdateOne {
	ltuo.mutation.ResetCreateAt()
	ltuo.mutation.SetCreateAt(u)
	return ltuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ltuo *LaunchTimeUpdateOne) SetNillableCreateAt(u *uint32) *LaunchTimeUpdateOne {
	if u != nil {
		ltuo.SetCreateAt(*u)
	}
	return ltuo
}

// AddCreateAt adds u to the "create_at" field.
func (ltuo *LaunchTimeUpdateOne) AddCreateAt(u uint32) *LaunchTimeUpdateOne {
	ltuo.mutation.AddCreateAt(u)
	return ltuo
}

// SetUpdateAt sets the "update_at" field.
func (ltuo *LaunchTimeUpdateOne) SetUpdateAt(u uint32) *LaunchTimeUpdateOne {
	ltuo.mutation.ResetUpdateAt()
	ltuo.mutation.SetUpdateAt(u)
	return ltuo
}

// AddUpdateAt adds u to the "update_at" field.
func (ltuo *LaunchTimeUpdateOne) AddUpdateAt(u uint32) *LaunchTimeUpdateOne {
	ltuo.mutation.AddUpdateAt(u)
	return ltuo
}

// SetDeleteAt sets the "delete_at" field.
func (ltuo *LaunchTimeUpdateOne) SetDeleteAt(u uint32) *LaunchTimeUpdateOne {
	ltuo.mutation.ResetDeleteAt()
	ltuo.mutation.SetDeleteAt(u)
	return ltuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (ltuo *LaunchTimeUpdateOne) SetNillableDeleteAt(u *uint32) *LaunchTimeUpdateOne {
	if u != nil {
		ltuo.SetDeleteAt(*u)
	}
	return ltuo
}

// AddDeleteAt adds u to the "delete_at" field.
func (ltuo *LaunchTimeUpdateOne) AddDeleteAt(u uint32) *LaunchTimeUpdateOne {
	ltuo.mutation.AddDeleteAt(u)
	return ltuo
}

// Mutation returns the LaunchTimeMutation object of the builder.
func (ltuo *LaunchTimeUpdateOne) Mutation() *LaunchTimeMutation {
	return ltuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ltuo *LaunchTimeUpdateOne) Select(field string, fields ...string) *LaunchTimeUpdateOne {
	ltuo.fields = append([]string{field}, fields...)
	return ltuo
}

// Save executes the query and returns the updated LaunchTime entity.
func (ltuo *LaunchTimeUpdateOne) Save(ctx context.Context) (*LaunchTime, error) {
	var (
		err  error
		node *LaunchTime
	)
	ltuo.defaults()
	if len(ltuo.hooks) == 0 {
		node, err = ltuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LaunchTimeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ltuo.mutation = mutation
			node, err = ltuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ltuo.hooks) - 1; i >= 0; i-- {
			if ltuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ltuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ltuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ltuo *LaunchTimeUpdateOne) SaveX(ctx context.Context) *LaunchTime {
	node, err := ltuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ltuo *LaunchTimeUpdateOne) Exec(ctx context.Context) error {
	_, err := ltuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltuo *LaunchTimeUpdateOne) ExecX(ctx context.Context) {
	if err := ltuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ltuo *LaunchTimeUpdateOne) defaults() {
	if _, ok := ltuo.mutation.UpdateAt(); !ok {
		v := launchtime.UpdateDefaultUpdateAt()
		ltuo.mutation.SetUpdateAt(v)
	}
}

func (ltuo *LaunchTimeUpdateOne) sqlSave(ctx context.Context) (_node *LaunchTime, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   launchtime.Table,
			Columns: launchtime.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: launchtime.FieldID,
			},
		},
	}
	id, ok := ltuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing LaunchTime.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ltuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, launchtime.FieldID)
		for _, f := range fields {
			if !launchtime.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != launchtime.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ltuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ltuo.mutation.ProjectID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: launchtime.FieldProjectID,
		})
	}
	if value, ok := ltuo.mutation.NetworkName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: launchtime.FieldNetworkName,
		})
	}
	if value, ok := ltuo.mutation.NetworkVersion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: launchtime.FieldNetworkVersion,
		})
	}
	if value, ok := ltuo.mutation.Introduction(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: launchtime.FieldIntroduction,
		})
	}
	if value, ok := ltuo.mutation.LaunchTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: launchtime.FieldLaunchTime,
		})
	}
	if value, ok := ltuo.mutation.AddedLaunchTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: launchtime.FieldLaunchTime,
		})
	}
	if value, ok := ltuo.mutation.Incentive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: launchtime.FieldIncentive,
		})
	}
	if value, ok := ltuo.mutation.IncentiveTotal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: launchtime.FieldIncentiveTotal,
		})
	}
	if value, ok := ltuo.mutation.AddedIncentiveTotal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: launchtime.FieldIncentiveTotal,
		})
	}
	if value, ok := ltuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: launchtime.FieldCreateAt,
		})
	}
	if value, ok := ltuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: launchtime.FieldCreateAt,
		})
	}
	if value, ok := ltuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: launchtime.FieldUpdateAt,
		})
	}
	if value, ok := ltuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: launchtime.FieldUpdateAt,
		})
	}
	if value, ok := ltuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: launchtime.FieldDeleteAt,
		})
	}
	if value, ok := ltuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: launchtime.FieldDeleteAt,
		})
	}
	_node = &LaunchTime{config: ltuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ltuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{launchtime.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
